---
title: "EnrichGT"
author: "Zhiming Ye"
format: 
  html:
    code-overflow: wrap
    mermaid: 
      theme: neutral
toc: true
toc-depth: 3
toc-expand: true
---

```{r}
#| message: false
#| warning: false
#| include: false
library(Rd2md)
render_refman("../EnrichGT/","./pkgfuns.qmd")
```

# Overview

::: callout-tip
### What is EnrichGT?

| EnrichGT means [enrich]{.underline}ing previously enriched results ($E^2_{\text{enrich}}$) into [g]{.underline}reat [t]{.underline}ables and more ... |
|------------------------------------------------------------------------|
| Efficient C++-based functions for **rapid enrichment** analysis |
| **Simple** input format, empowering non-pro users |
| Re-clustering of enriched results provides **clear and actionable insights** |
| User-friendly **HTML output** that is easy to read and interpret |
| Do a series of things just in **ONE** package |
:::

```{mermaid}

graph LR
    
    M[genes]
    N[genes with weights]
    
    subgraph Enrichment Analysis
        A[egt_enrichment_analysis]
        B[egt_gsea_analysis]
    end

    subgraph Pathway Databases
        D[database_* funcs]
    end

    subgraph Visualize results
        P1[egt_plot_results]
        P2[egt_plot_umap]
    end

    subgraph egt_recluster_analysis
        K1[Pretty table]
        CC[cluster modules]
        MG[gene modules]
    end

    subgraph Pathway Act. and TF infer 
        
        I[egt_infer]
    end
    
    M --> A
    N --> B
    
    D --> A
    D --> B
    
    A --> C[Enriched Result]
    B --> C

    C --> CC
    C --> MG

    C --> P1

    CC --> K1
    MG --> K1

    CC --> P1
    CC --> P2

    MG --> I



```

^The functions from EnrichGT are starting with “egt\_” or “database\_”.^

After version 0.7.0 (2024-12-24), EnrichGT would be entering supported mode and perhaps without adding new functions. We want to keep this package lightweight with limited functions. If you need a tool that handles every detail, please use ***clusterProfiler*** instead. See [Acknowledgement] for details.

# Install EnrichGT

``` r
install.packages("pak")
pak::pkg_install("ZhimingYe/EnrichGT")
```

or

``` r
install.packages("devtools")
library(devtools)
install_github("ZhimingYe/EnrichGT")
```

The `AnnotationDbi`, `fgsea`, `reactome.db` and `GO.db` were from BioConductor and might be slow to install. If you can't install, please re-check your web connections or update your R and BioConductor, or use [Posit Package Manager](https://packagemanager.posit.co/) to install when using old R.

# Meet EnrichGT

::: callout-important
See [package function page](pkgfuns.html) for further information (For example, how to use a function)

You can use `? function` to get further help when installed.

``` r
?egt_recluster_analysis
```
:::

In most examples of this document, we use a result table of DEG analysis `DEG.csv`. The gene symbols of `DEG.csv` is on the first column without column name. In default `read_csv()` convert the unamed column name to `...1`. So `DEGtable$...1` refers to gene symbols.

## Core Function

### Enrichment of genes

This is a `C++` accelerated over representation analysis tool. The only things you need is your favourite gene symbols. If is all prepared, then load a database, run it!

::: {.callout-note collapse="true"}
#### The difference from other tools

Compared to the most popular clusterProfiler, the functions of EnrichGT differ slightly. This is mainly to accommodate wet lab researchers. First, most beginners are confused by the default input of clusterProfiler, which is “ENTREZ ID.” Most people familiar with biology are used to Gene Symbols, and even Ensembl IDs are not widely known, let alone a series of seemingly random numbers. Therefore, EnrichGT uses Gene Symbol as the default input, seamlessly integrating with most downstream results from various companies, making it more suitable for non-experts in the lab.

Second, clusterProfiler outputs an S4 object, which may be too complex for beginners (this is no joke); whereas EnrichGT outputs a simple table. The time of non-experts is precious, so I made these two adjustments. The only downside is that the GSEA peak plot is difficult to generate, but in reality, we focus more on NES and p-values, and in this case, bar plots are more convincing.

Furthermore, The pre-processing step of the hypergeometric test in EnrichGT’s ORA function (which determines overlap) is accelerated using hash tables in C++, making it over five times faster than `clusterProfiler::enricher()`, which is a pure R implementation.
:::

``` r
res <- egt_enrichment_analysis(genes = DEGtable$Genes,
database = database_GO_BP(org.Hs.eg.db))

res <- egt_enrichment_analysis(genes = c("TP53","CD169","CD68","CD163",
                                         "You can add more genes"),
database = database_Reactome(org.Hs.eg.db))

res <- egt_enrichment_analysis(genes = c("TP53","CD169","CD68","CD163",
                                         "You can add more genes"),
database = database_from_gmt("MsigDB_Hallmark.gmt"))
```

Now, we load the necessary packages and example dataset, to provide you with an example.

```{r}
#| message: false
#| warning: false
library(dplyr)
library(tibble)
library(ggplot2)
library(org.Hs.eg.db)
library(gt)
library(EnrichGT)
library(readr)
DEGexample <- read_csv("./DEG.csv")
DEGexample_UpReg <- DEGexample |> dplyr::filter(pvalue<0.05,log2FoldChange>0.7)
```

Then we start ORA:

```{r}
ora_result <- egt_enrichment_analysis(genes = DEGexample_UpReg$...1,database = database_GO_BP(org.Hs.eg.db))
ora_result |> as_tibble() # You don't need to call as_tibble, this is just for better printing
```

::: callout-tip
#### Have many sources of genes?

This function also support many groups of genes, you can input a `list`.

``` r
# For many groups of genes
res <- egt_enrichment_analysis(list(Macrophages=c("CD169","CD68","CD163"),
Fibroblast=c("COL1A2","COL1A3"),"You can add more groups"),
 database = database_from_gmt("panglaoDB.gmt"))
```
:::

For visualize, see [Ploting ORA result] for details.

### Enrichment of weighted genes (GSEA)

Genes with specific weights (e.g. the log2FC) can use GSEA method. It should input a pre-ranked geneset. This use `C++` accelerated `fgsea::fgsea()` as backend, so it is also very fast.

This provides a quick display of NES, p-values, and leading-edge genes. This function uses the same backend as the industry-standard `clusterProfiler` (it is also implemented using the [fgsea](https://github.com/ctlab/fgsea) package). However, `EnrichGT` does not delve as deeply as `clusterProfiler` and lacks advanced visualization capabilities. While it may not be sufficient for bioinformatics experts, the current implementation is adequate for wet-lab researchers. If comprehensive analysis is required, consider using `clusterProfiler.` However, if you only need an overview and reclustering, `EnrichGT` may be enough.

::: callout-note
#### How to build pre-ranked gene set?

`genes_with_weights(genes,weights)` function is used to build the pre-ranked gene set for GSEA analysis.
:::

Usually, GSEA use the `log2FoldChange` from DEG analysis as the weights of genes. This is an example:

```{r}
resGSEA <- egt_gsea_analysis(genes = 
                           genes_with_weights(genes = DEGexample$...1, 
                                              weights = DEGexample$log2FoldChange),
                         database = database_GO_BP(org.Hs.eg.db)
                         )
resGSEA |> as_tibble() # You don't need to call as_tibble, this is just for better printing
```

Other kind of weights, like the loading from PCA or NMF, or the importance of random forest, can be also used.

``` r
resExample <- egt_gsea_analysis(genes = genes_with_weights(genes = PCA_res$genes,
                                                    weights =PCA_res$PC1_loading),
                         database = database_from_gmt("MsigDB_Hallmark.gmt")
                         )
```

For visualize, see [Ploting GSEA result] for details.

## Re-ENRICH Function

### Enrichment of Enriched Results

The enriched result is too messy? Clean up it!

EnrichGT generates insightful results by simply constructing a term frequency matrix of genes enriched in pathways and performing clustering. While the results may not be statistically optimal, they offer significant interpretive insights.

Print `?egt_recluster_analysis` for further help. But of note, you can adjust `ClusterNum` (Cluster the enrichment into N clusters) and `nTop` (Show how many top items in GT table) for a better result (the default is not all the best for your data).

::: callout-tip
#### Form clusterProfiler ?

This can also supports the results from `clusterProfiler`, so you can use **any tool** to do this.
:::

::: {.callout-note collapse="true"}
#### Why the `re-enrichment` is necessary?

##### Challenges in Biological Gene Enrichment Analysis

Gene enrichment analysis can often be misleading due to the redundancy within gene set databases and the limitations of most enrichment tools. Many tools, by default, only display a few top results and fail to filter out redundancy. This can result in both biological misinterpretation and valuable information being overlooked.

For instance, high expression of certain immune genes can cause many immune-related gene sets to appear overrepresented. However, a closer look often reveals that these gene sets are derived from the same group of genes, which might represent only a small fraction (less than 10%) of the differentially expressed genes (DEGs). What about the other 90%? Do they hold no biological significance?

##### Current Solutions

**clusterProfiler** is one of the most powerful tools in R for enrichment analysis. It's designed with pathway redundancy in mind and includes the `clusterProfiler::simplify` function to address this issue. This method, based on **GOSemSim** for GO similarity evaluation, is scientifically robust and highly effective.

However, there are some drawbacks:

-   GOSemSim is not fast, particularly when dealing with large or complex gene sets.

-   It doesn't support databases like KEGG or Reactome.

Using GOSemSim to measure the semantic similarity between pathways is, theoretically, the best way to tackle redundancy. However, in practical cases—especially in experimental bioinformatics validation—researchers are more focused on the genes behind these pathways rather than the pathways themselves.

##### Alternative Approaches

Although clustering pathways based on gene overlap has received some criticism, it remains a viable approach in many situations. For this reason, I developed **BioThemeFinder** a few years ago to solve this problem. However, the tool is so awful (I am poor in coding...)

Today, two excellent alternatives exist:

-   **simplifyEnrichment**: This package is more scientifically rigorous (based on semantic similarity) and creates beautiful visualizations. It also doesn't support databases like KEGG or Reactome.
-   **aPEAR**: A simpler and faster tool that better aligns with practical needs, making it my preferred choice.

However, both of these tools have a common limitation: their visualizations are optimized for publication purposes rather than for exploratory research. I often find myself exporting CSV files or struggling with RStudio's preview pane to fully explore enrichment tables. This inspired me to develop a more efficient solution. Also, they are slow.

##### Goals of This Package

The main purpose of developing this package is to provide a **lightweight and practical solution** to the problems mentioned above. Specifically, this package aims to:

**Cluster enrichment results** based on hit genes or core enrichment from GSEA using term frequency analysis (from the output of the powerful `clusterProfiler`). This provides a clearer view of biological relevance by focusing on the genes that matter most.
:::

``` r
# From results generated before
res <- egt_enrichment_analysis(genes = DEGtable$Genes,
database = database_GO_BP(Org.Hs.eg.db))

re_enrich <- egt_recluster_analysis(
  res,
  ClusterNum = 17,
  P.adj = 0.05,
  force = F,
  nTop = 10,
  method = "ward.D2"
)
```

```{r}
#| include: false
re_enrich <- egt_recluster_analysis(ora_result)
```

You can see the structure of `re_enrich` object above. The `re_enrich` object is an S4 `EnrichGT_obj` object. The first slot is the result table (a `data.frame`), and the second slot contains gt table.

```{r}
str(re_enrich,max.level = 2)
```

::: callout-tip
#### How to get objects inside the S4 object?

You can use `@`, for example, `x <- re_enrich@enriched_result` returns a result table and `x <- re_enrich@gt_object` returns a `gt` object.
:::

You can simple `View(re_enrich@enriched_result)` for the first slot.

```{r}
x <- re_enrich@enriched_result # Get the re-enrichment result table
table(x$Cluster) # You can see all enriched results splited into 17 clusters
x
```

But EnrichGT offers **more than** data frames. Please see [HTML reports (gt table)](#html-reports-gt-table) for further visualization.

### Infering TFs or pathway activity and more based on meta-gene modules

Based on re-enriched result, the S4 object return from re-enrichment contains `gene_modules` slot and `pathway_clusters` slot. In `gene_modules` slot you can find a group of meta-genes take part in specific pathway cluster (in `pathway_clusters` slot).

EnrichGT supports inferring Pathway or Transcript Factors activity from re-enriched meta-gene modules. This is accomplished by two amazing database:

-   [PROGENy](https://saezlab.github.io/progeny/) is a comprehensive resource containing a curated collection of pathways and their target genes, with weights for each interaction.

-   [CollecTRI](https://github.com/saezlab/CollecTRI) is a comprehensive resource containing a curated collection of TFs and their transcriptional targets compiled from 12 different resources. This collection provides an increased coverage of transcription factors and a superior performance in identifying perturbed TFs compared to our previous.

::: {.callout-note collapse="true"}
#### TF infering Example:

```{r}
#| fig-width: 7
#| fig-height: 7
re_enrich_smaller_clusterNum <- 
  egt_recluster_analysis(
  ora_result,
  ClusterNum = 6, # reduce the cluster nums. 
  P.adj = 0.05,
  force = F,
  nTop = 10,
  method = "ward.D2"
)
TF_Act <- egt_infer_act(re_enrich_smaller_clusterNum,DB = "collectri", species = "human")
egt_plot_results(TF_Act$Cluster_3)
```
:::

::: callout-tip
#### Wants to interpret the regulator of whole inputted genes?

`PROGENy` and `CollecTRI` can be used just like other database in ORA or GSEA enrichment, for example, the `database_GO_BP()`. See [Progeny Database] and [CollecTRI Database] page for detail.

Example:

``` r
TFActivity <- egt_enrichment_analysis(genes = DEGtable$Genes,
database = database_CollecTRI_human())
```
:::

::: callout-important
#### Why many inferred results are empty?

If when doing re-enrichment with a high number of clusters, that may cause low gene number in each meta-gene module (splitting into too many clusters make gene in each cluster is not enough to enrich), and then can't be inferred successfully. So if result is empty, please increase the number of re-clustering when doing it.
:::

## Functions to FUSING results

### Enrichment analysis using multiple databases

Some enrichment analysis tools like [Metascape](https://metascape.org/gp/index.html) can provide multi-database analysis in one-click (e.g. combining GO, KEGG, Reactome... ). EnrichGT also provides a similar function to achieve this (**fuse** them). You can provide a list containing multiple enrichment results form `EnrichGT` or `clusterProfiler` into `egt_recluster_analysis`.

::: callout-important
Of note, all enriched objects in the same list should from **the same** gene source. Like the below example, both the `res1` and `res2` are enriched results from `DEGtable$Genes`.
:::

Example:

``` r
res1 <- egt_enrichment_analysis(genes = DEGtable$Genes,
database = database_GO_BP(org.Hs.eg.db))

res2 <- egt_enrichment_analysis(genes = DEGtable$Genes,
database = database_Reactome(org.Hs.eg.db))

Fused_enrich <- egt_recluster_analysis(list(res1,res2))
```

After this, you can generate HTML tables to view the fused result (See the [HTML reports (gt table)](#html-reports-gt-table)).

### Reversed gene sources analyzed by same database

This is a less meticulously crafted feature that performs re-clustering analysis by categorizing and considering various cases, such as intersections, unions, and unrelated sets. The result is a list containing four `EnrichGT_obj` objects with overlapped enriched terms, unique enrich terms.

``` r
# See ?egt_compare_groups for further helps
Result_List <- egt_compare_groups(
  obj.test,
  obj.ctrl,
  name.test = NULL,
  name.ctrl = NULL,
  ClusterNum = 15,
  P.adj = 0.05,
  force = F,
  nTop = 10,
  method = "ward.D2",
)
```

Example:

```{r}
#| message: false
#| warning: false
DEGexample_UpReg <- DEGexample |> dplyr::filter(pvalue<0.05,log2FoldChange>0.7)
DEGexample_DownReg <- DEGexample |> dplyr::filter(pvalue<0.05,log2FoldChange<(-0.7))
ora_resultUP <- egt_enrichment_analysis(genes = DEGexample_UpReg$...1,database = database_GO_BP(org.Hs.eg.db))
ora_resultDown <- egt_enrichment_analysis(genes = DEGexample_DownReg$...1,database = database_GO_BP(org.Hs.eg.db))
Compared_Result <- egt_compare_groups(ora_resultUP,ora_resultDown)
```

You can use `str(Result_List)` to explore what is inside the list. All items inside it is all basic `EnrichGT_obj`s. You can then use the functions from other sections of this tutorial for similar visualizations.

```{r}
str(Compared_Result,max.level = 2)
```

## HTML reports (gt table) {#html-reports-gt-table}

Because of the messy result table is hardly to read, `EnrichGT` help you convert it into pretty `gt` HTML tables. This only supports the re-enriched results.

You can simple input the object name of re-enriched object or fused object, to show the table.

![](enrichGTTable.jpg)

This just shows the second slot inside the `EnrichGT_obj` object. The second slot - `gt_object` is a pure object of `gt` package, you can use any [function](https://gt.rstudio.com/reference/index.html) on it, like:

``` r
re_enrichment_results@gt_object |> gt_save("test.html") # Save it use basic gt functions. 
```

For further usage of gt package, please refer to <https://gt.rstudio.com/articles/gt.html>.

See re-enrichment example for further demo.

## Ploting functions

HTML `gt` table satisfied most of things, but for others. Though we don't want this package become complex (i.e., you can simple draw your figure using ggplot2 for enriched tables by yourself.) But we still provide limited figure ploting functions.

### Basic result plot

The Dot Plot provide basic viewing of results. So it supports both simple enrichment result `data.frame` and re-enriched `egt_object`.

#### Ploting ORA result

```{r}
#| fig-width: 7
#| fig-height: 8
egt_plot_results(ora_result)
```

#### Ploting GSEA result

```{r}
#| fig-width: 7
#| fig-height: 8
egt_plot_results(resGSEA)
```

#### Ploting re-enrichment result

```{r}
#| fig-width: 7
#| fig-height: 11
egt_plot_results(re_enrich)
```

### Re-enrichment dimensionality reduction plot

UMAP plot only supports re-enriched `egt_object`, to show the dimensionality reduction view of enriched results.

```{r}
#| fig-width: 10
#| fig-height: 10
egt_plot_umap(re_enrich)
```

## DataBases Helpers

::: callout-note
### How to specify species?

EnrichGT use `AnnotationDbi` for fetching most of databases and gene annotations. you can use `org.Hs.eg.db` for human and `org.Mm.eg.db` for mouse. For others, please search in Google or refer to `BioConductor`.

But for non-AnnotationDbi source database, you do not need to provide this, like `database_CollecTRI_human()` return database about human only.
:::

### Built in database form AnnotationDbi

You should add argument `OrgDB` for fetching them.

Example:

``` r
database_GO_BP(OrgDB = org.Hs.eg.db)
```

#### GO Database

`BP` stands for biological process, `CC` stands for cellular component and `MF` stands for molecular functions. The `ALL` will combined the above three sub-databases.

`database_GO_BP()`, `database_GO_CC()`, `database_GO_MF()`, `database_GO_ALL()`

#### Reactome Database

[Reactome](https://reactome.org/) is an open source pathway database.

`database_Reactome()`

#### KEGG Database

KEGG is a commercialized database. So EnrichGT can't pre-cache them locally. You can use `database_kegg` to fetch KEGG database pathways and modules.

This function requires two species-related argument. You may familiar to the `OrgDB` argument as they will be used to convert `ENTREZ ID`s to symbols like before. Another argument is the `kegg_organism`. It determines which species data from KEGG will be fetch. For human, it would be `hsa`(in default); For mouse, it would be `mmu`. If you wants other species, execute `database_kegg_show_organism()` for details.

You can switch fetching KEGG pathways or modules by argument `kegg_modules`. If TRUE, returns KEGG module; If FALSE returns KEGG pathways. In default, this is setted to FALSE to get mouse commonly used KEGG pathways.

If you set `local_cache = T`, EnrichGT will cache a copy in local working folder. It will be saved as a `.enrichgt_cache` file in working dictionary. The `.enrichgt_cache` is just a `.rds` file, feel free to read it using `readRDS()`.

``` r
keggdf <- database_kegg(kegg_organism="hsa",OrgDB = org.Hs.eg.db,kegg_modules=F,local_cache=F)
```

#### WikiPathway Database

WikiPathway database provides pre-built GMT files (<https://data.wikipathways.org/current/gmt/>). In default they are recorded as `ENTREZ IDs`, so you need to provide proper species database (e.g. org.Hs.eg.db for human), to `database_from_gmt` function and EnrichGT will automatically convert `ENTREZ IDs` to gene symbols for enrichment analysis.

``` r
download.file("https://data.wikipathways.org/current/gmt/wikipathways-20241210-gmt-Homo_sapiens.gmt",destfile = "WikiPWS_human.gmt")
WikiPWsDB <- database_from_gmt("WikiPWS_human.gmt",OrgDB=org.Hs.eg.db)
res <- egt_enrichment_analysis(genes = DEGtable$Genes,
database = WikiPWsDB)
```

#### Progeny Database

For pathway activity infer, `database_progeny_human()` and `database_progeny_mouse()`

#### CollecTRI Database

For Transcript Factors infer, `database_CollecTRI_human()` and `database_CollecTRI_mouse()`

### Read Addition Gene Sets from local GMT files

EnrichGT supports reading `GMT` files, You can obtain `GMT` files from [MsigDB](https://www.gsea-msigdb.org/gsea/msigdb/index.jsp).

``` r
database_from_gmt("Path_to_your_Gmt_file.gmt")
```

In default, `database_from_gmt` will try to convert the numeric ids to gene symbols (as they are usually the `ENTREZ IDs`, you can disable this by passing `convert_2_symbols = F` ).

### Read Addition Gene Sets from local data tables

The result of any `database_***` functions are `data.frame`s. So you can simple read any data tables and use them for any enrichment function.

The typical input should be:

| IDs | Term                | Genes                  |
|-----|---------------------|------------------------|
| ID1 | Biological Pathway1 | Gene1, Gene2, Gene3... |
| ID2 | Biological Pathway2 | Gene4, Gene2, Gene3... |
| ... | ...                 | ...                    |

or

| Term                | Genes                  |
|---------------------|------------------------|
| Biological Pathway1 | Gene1, Gene2, Gene3... |
| Biological Pathway2 | Gene4, Gene2, Gene3... |
| ...                 | ...                    |

Example:

``` r
library(readr)
db <- read_csv("you_gene_set.csv")
res <- egt_enrichment_analysis(genes = DEGtable$Genes,
database = db)
```

### Gene Annotation Converter

You can use `convert_annotations_genes()` to convert gene annotations from any keys to any keys.

Example:

```{r}
convert_annotations_genes(DEGexample_UpReg$...1[1:10], from_what="SYMBOL", to_what=c("ENTREZID","ENSEMBL","GENENAME"), OrgDB=org.Hs.eg.db)
```

# Acknowledgement

This package is inspired by famous `clusterProfiler`. But since 0.5 version, the major enrichment functions of `EnrichGT` have replaced by the self-implemented functions, which provides a much light-weight experience. But without `clusterProfiler`, I won't try to write this package.

::: callout-note
# If also using `clusterProfiler` ?

Please cite:

T Wu<sup>\#</sup>, E Hu<sup>\#</sup>, S Xu, M Chen, P Guo, Z Dai, T Feng, L Zhou, W Tang, L Zhan, X Fu, S Liu, X Bo<sup>\*</sup>, **G Yu**<sup>\*</sup>. clusterProfiler 4.0: A universal enrichment tool for interpreting omics data. ***The Innovation***. 2021, 2(3):100141. doi: [10.1016/j.xinn.2021.100141](https://doi.org/10.1016/j.xinn.2021.100141)
:::