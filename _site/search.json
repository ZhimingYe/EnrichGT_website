[
  {
    "objectID": "visualize.html",
    "href": "visualize.html",
    "title": "Visualize results through HTML reports or figures",
    "section": "",
    "text": "Because of the messy result table is hardly to read, EnrichGT help you convert it into pretty tinytable HTML tables. This only supports the re-enriched results.\nYou can simple print by input the object name of re-enriched object or fused object to R console, to show the table. In IDE like RStudio and Positron, you can view the table in View window. You can also integrate to R-based publish systems like rmarkdown, Quarto or litedown. Like this: The default setting is optimized for HTML reports. For Latex reports, you may refer to the document of tinytable.\n\nre_enrich\n\n\n\n    \n\n    \n    \n      \n        \n        Parse form: ora_result;    Split into 10 Clusters. Generated by github@zhimingye/EnrichGT. Time: 2025-04-07 22:48:31.201264\n              \n                Description\n                Count\n                PCT\n                Padj\n                geneID\n              \n        \n        \n        \n                \n                  GO:0035249 | synaptic transmission, glutamatergic\n                  19\n                  4.2\n                  8.1e-08\n                  ATP1A2, GRIA4, GRID2, GRIK2, GRIK3, GRIN1, GRIN2A, GRIN2B, GRIN2D, GRM1, GRM5, GRM8, DGKI, NRXN1, NLGN1, UNC13A, MAPK8IP2, CACNG5, UNC13C\n                \n                \n                  GO:0051966 | regulation of synaptic transmission, glutamatergic\n                  16\n                  3.5\n                  8.1e-08\n                  ATP1A2, GRIK2, GRIK3, GRIN1, GRIN2A, GRIN2B, GRIN2D, GRM1, GRM5, GRM8, DGKI, NRXN1, NLGN1, UNC13A, MAPK8IP2, CACNG5\n                \n                \n                  GO:0050804 | modulation of chemical synaptic transmission\n                  39\n                  8.5\n                  8.1e-08\n                  ACHE, APOE, ATP1A2, CA2, CAMK2B, CDC20, GFAP, GRIA4, GRID2, GRIK2, GRIK3, GRIN1, GRIN2A, GRIN2B, GRIN2D, GRM1, GRM5, GRM8, HRAS, MAP1B, NTRK2, SLC6A1, CNTN2, VGF, WNT5A, INA, DGKI, DLGAP1, NRXN1, RIMS3, NMU, NLGN1, UNC13A, MAPK8IP2, ERC2, CACNG5, LRFN2, UNC13C, SHISA9\n                \n                \n                  GO:0099177 | regulation of trans-synaptic signaling\n                  39\n                  8.5\n                  8.1e-08\n                  ACHE, APOE, ATP1A2, CA2, CAMK2B, CDC20, GFAP, GRIA4, GRID2, GRIK2, GRIK3, GRIN1, GRIN2A, GRIN2B, GRIN2D, GRM1, GRM5, GRM8, HRAS, MAP1B, NTRK2, SLC6A1, CNTN2, VGF, WNT5A, INA, DGKI, DLGAP1, NRXN1, RIMS3, NMU, NLGN1, UNC13A, MAPK8IP2, ERC2, CACNG5, LRFN2, UNC13C, SHISA9\n                \n                \n                  GO:0050808 | synapse organization\n                  36\n                  7.9\n                  2.1e-06\n                  ACHE, APOE, KIF1A, CAMK2B, CDC20, CDH6, CTNNA2, DSCAM, GAP43, GRID2, GRIN2B, GRM5, MAP1B, NRCAM, NTRK2, RAC3, SIX1, SLC6A1, CNTN2, WNT5A, INA, NRXN1, NLGN1, UNC13A, ERC2, IL1RAPL2, SEZ6L2, TREM2, LRFN2, IGSF9, BCAN, SYNDIG1, DNER, ADGRF1, LHFPL4, UNC13C\n                \n                \n                  GO:0048168 | regulation of neuronal synaptic plasticity\n                  12\n                  2.6\n                  4.2e-06\n                  APOE, CAMK2B, GRIK2, GRIN1, GRIN2A, GRIN2B, GRIN2D, GRM5, HRAS, CNTN2, VGF, SHISA9\n                \n                \n                  GO:0007215 | glutamate receptor signaling pathway\n                  11\n                  2.4\n                  5.2e-06\n                  GRIA4, GRID2, GRIK2, GRIK3, GRIN1, GRIN2A, GRIN2B, GRIN2D, GRM1, GRM5, GRM8\n                \n                \n                  GO:0035235 | ionotropic glutamate receptor signaling pathway\n                  8\n                  1.8\n                  1.1e-05\n                  GRIA4, GRID2, GRIK2, GRIK3, GRIN1, GRIN2A, GRIN2B, GRIN2D\n                \n                \n                  GO:0048167 | regulation of synaptic plasticity\n                  20\n                  4.4\n                  4.5e-05\n                  APOE, CAMK2B, CDC20, GFAP, GRID2, GRIK2, GRIN1, GRIN2A, GRIN2B, GRIN2D, GRM5, HRAS, MAP1B, NTRK2, CNTN2, VGF, RIMS3, ERC2, UNC13C, SHISA9\n                \n                \n                  GO:0060078 | regulation of postsynaptic membrane potential\n                  16\n                  3.5\n                  8.5e-05\n                  GABRD, GRIA4, GRID2, GRIK2, GRIK3, GRIN1, GRIN2A, GRIN2B, GRIN2D, GRM1, GRM5, HTR3A, NRXN1, NLGN1, MAPK8IP2, HCN1\n                \n                \n                  GO:0007094 | mitotic spindle assembly checkpoint signaling\n                  11\n                  2.4\n                  4.2e-06\n                  BIRC5, BUB1, CCNB1, CDC20, CENPF, PLK1, NDC80, ZWINT, CDCA8, NUF2, SPC24\n                \n                \n                  GO:0071174 | mitotic spindle checkpoint signaling\n                  11\n                  2.4\n                  4.2e-06\n                  BIRC5, BUB1, CCNB1, CDC20, CENPF, PLK1, NDC80, ZWINT, CDCA8, NUF2, SPC24\n                \n                \n                  GO:0071173 | spindle assembly checkpoint signaling\n                  11\n                  2.4\n                  4.2e-06\n                  BIRC5, BUB1, CCNB1, CDC20, CENPF, PLK1, NDC80, ZWINT, CDCA8, NUF2, SPC24\n                \n                \n                  GO:0031577 | spindle checkpoint signaling\n                  11\n                  2.4\n                  4.2e-06\n                  BIRC5, BUB1, CCNB1, CDC20, CENPF, PLK1, NDC80, ZWINT, CDCA8, NUF2, SPC24\n                \n                \n                  GO:0010965 | regulation of mitotic sister chromatid separation\n                  12\n                  2.6\n                  4.2e-06\n                  BIRC5, BUB1, CCNB1, CDC20, CENPF, PLK1, NDC80, UBE2C, ZWINT, CDCA8, NUF2, SPC24\n                \n                \n                  GO:0045841 | negative regulation of mitotic metaphase/anaphase transition\n                  11\n                  2.4\n                  4.2e-06\n                  BIRC5, BUB1, CCNB1, CDC20, CENPF, PLK1, NDC80, ZWINT, CDCA8, NUF2, SPC24\n                \n                \n                  GO:0033048 | negative regulation of mitotic sister chromatid segregation\n                  11\n                  2.4\n                  4.2e-06\n                  BIRC5, BUB1, CCNB1, CDC20, CENPF, PLK1, NDC80, ZWINT, CDCA8, NUF2, SPC24\n                \n                \n                  GO:2000816 | negative regulation of mitotic sister chromatid separation\n                  11\n                  2.4\n                  4.2e-06\n                  BIRC5, BUB1, CCNB1, CDC20, CENPF, PLK1, NDC80, ZWINT, CDCA8, NUF2, SPC24\n                \n                \n                  GO:0033046 | negative regulation of sister chromatid segregation\n                  11\n                  2.4\n                  4.2e-06\n                  BIRC5, BUB1, CCNB1, CDC20, CENPF, PLK1, NDC80, ZWINT, CDCA8, NUF2, SPC24\n                \n                \n                  GO:0051985 | negative regulation of chromosome segregation\n                  11\n                  2.4\n                  5.2e-06\n                  BIRC5, BUB1, CCNB1, CDC20, CENPF, PLK1, NDC80, ZWINT, CDCA8, NUF2, SPC24\n                \n                \n                  GO:0007626 | locomotory behavior\n                  18\n                  3.9\n                  2.5e-04\n                  ALK, APOE, ATP1A2, DPP4, DSCAM, GAD1, GPR37, GRIN2D, GRM1, GRM5, SLC6A3, CNTN2, UCHL1, ZIC1, RASD2, ANKH, PPP1R1B, CIART\n                \n                \n                  GO:0001964 | startle response\n                  6\n                  1.3\n                  2.7e-03\n                  CTNNA2, GRID2, GRIN2A, GRIN2D, SLC6A3, CNTNAP2\n                \n                \n                  GO:0008038 | neuron recognition\n                  7\n                  1.5\n                  5.4e-03\n                  DSCAM, GAP43, NRCAM, OPCML, CNTN2, CNTNAP2, IGSF9\n                \n                \n                  GO:0008037 | cell recognition\n                  13\n                  2.8\n                  5.4e-03\n                  C4BPB, DSCAM, FOLR2, GAP43, NRCAM, OPCML, CNTN2, ZAN, CNTNAP2, TREM2, IGSF9, MEGF10, ATP8B3\n                \n                \n                  GO:0015669 | gas transport\n                  5\n                  1.1\n                  7.2e-03\n                  CA2, HBA1, HBA2, HBB, MB\n                \n                \n                  GO:0042542 | response to hydrogen peroxide\n                  10\n                  2.2\n                  7.8e-03\n                  COL1A1, CRYAB, NQO1, GPX1, HBA1, HBA2, HBB, HMOX1, SDC1, TRPM2\n                \n                \n                  GO:0021700 | developmental maturation\n                  20\n                  4.4\n                  7.8e-03\n                  AKR1B1, CAMK2B, CDC20, MAP1B, NKX6-1, NRCAM, RAC3, RYR1, CNTN2, WNT5A, NRXN1, NLGN1, UNC13A, CNTNAP2, SEZ6L2, TFCP2L1, SOX8, BCAN, TDRD5, UNC13C\n                \n                \n                  GO:0050905 | neuromuscular process\n                  13\n                  2.8\n                  7.8e-03\n                  CTNNA2, FOXS1, GRID2, GRIN2A, GRIN2D, RAC3, SLC6A3, TNNT1, UCHL1, NRXN1, CNTNAP2, STRA6, STAC2\n                \n                \n                  GO:0014074 | response to purine-containing compound\n                  12\n                  2.6\n                  8.4e-03\n                  HCN2, COL1A1, ENPP1, RYR1, SDC1, SLC5A5, SLC6A1, SLC6A3, SRD5A1, TRPM2, VGF, HCN1\n                \n                \n                  GO:0007409 | axonogenesis\n                  24\n                  5.3\n                  1.1e-02\n                  APLP1, APOE, CTNNA2, DLX5, DSCAM, FOXD1, GAP43, KIF5C, MAG, MAP1B, NKX6-1, NRCAM, NTRK2, RAC3, CNTN2, UCHL1, WNT5A, NRXN1, FSTL4, SEMA5B, DPYSL5, IGSF9, KIAA1755, EPHA10\n                \n                \n                  GO:0045664 | regulation of neuron differentiation\n                  17\n                  3.7\n                  6.7e-04\n                  JAG1, ALK, MAG, MAP1B, NKX6-1, NRCAM, RAC3, SFRP2, SIX1, CNTN2, TP73, ZNF536, NLGN1, HEY2, SOX8, ASPM, WDR62\n                \n                \n                  GO:0051960 | regulation of nervous system development\n                  27\n                  5.9\n                  2.2e-03\n                  ACAN, CAMK2B, HAPLN1, DSCAM, GFAP, GRID2, GRM5, MAG, MAP1B, NKX6-1, NTRK2, TP73, WNT5A, NRXN1, NLGN1, FSTL4, HEY2, DAAM2, SOX8, TREM2, SEMA5B, DPYSL5, BCAN, SYNDIG1, IL34, ASPM, WDR62\n                \n                \n                  GO:0051962 | positive regulation of nervous system development\n                  20\n                  4.4\n                  2.2e-03\n                  ACAN, CAMK2B, HAPLN1, DSCAM, GFAP, GRID2, GRM5, MAG, MAP1B, NKX6-1, NTRK2, TP73, NRXN1, NLGN1, SOX8, BCAN, SYNDIG1, IL34, ASPM, WDR62\n                \n                \n                  GO:0050767 | regulation of neurogenesis\n                  23\n                  5.0\n                  5.3e-03\n                  ACAN, CAMK2B, HAPLN1, DSCAM, GFAP, GRM5, MAG, MAP1B, NKX6-1, NTRK2, TP73, WNT5A, FSTL4, HEY2, DAAM2, SOX8, TREM2, SEMA5B, DPYSL5, BCAN, IL34, ASPM, WDR62\n                \n                \n                  GO:0050769 | positive regulation of neurogenesis\n                  16\n                  3.5\n                  1.1e-02\n                  ACAN, CAMK2B, HAPLN1, DSCAM, GFAP, GRM5, MAG, MAP1B, NKX6-1, NTRK2, TP73, SOX8, BCAN, IL34, ASPM, WDR62\n                \n                \n                  GO:0001764 | neuron migration\n                  13\n                  2.8\n                  1.4e-02\n                  CAMK2B, CTNNA2, EMX2, MAP1B, NKX6-1, NRCAM, NTRK2, SPOCK1, CNTN2, TWIST1, DNER, ASPM, WDR62\n                \n                \n                  GO:0048638 | regulation of developmental growth\n                  19\n                  4.2\n                  1.5e-02\n                  APOE, DSCAM, FOXC2, FOXS1, KCNK2, MAG, MAP1B, NKX6-1, NRCAM, SIX1, SLC6A3, TP73, WNT5A, AGR2, UNC13A, FSTL4, HEY2, SEMA5B, GPAM\n                \n                \n                  GO:0010975 | regulation of neuron projection development\n                  23\n                  5.0\n                  2.2e-02\n                  ALK, APOE, KIF1A, CAMK2B, CTNNA2, DSCAM, GFAP, GRID2, MAG, MAP1B, NRCAM, NTRK2, SDC2, SFRP2, SPOCK1, CNTN2, WNT5A, NLGN1, FSTL4, SEMA5B, DPYSL5, CAMK1D, TRPV4\n                \n                \n                  GO:0010001 | glial cell differentiation\n                  15\n                  3.3\n                  3.4e-02\n                  ACAN, HAPLN1, GAP43, GFAP, MAG, NKX6-1, NTRK2, CNTN2, TP73, DAAM2, SOX8, TREM2, BCAN, DNER, IL34\n                \n                \n                  GO:0061387 | regulation of extent of cell growth\n                  9\n                  2.0\n                  3.4e-02\n                  APOE, DSCAM, MAG, MAP1B, NKX6-1, NRCAM, WNT5A, FSTL4, SEMA5B\n                \n                \n                  GO:0043583 | ear development\n                  17\n                  3.7\n                  2.2e-03\n                  JAG1, COL11A1, GSDME, DLX5, KCNK2, MSX1, SIX1, TFAP2A, TWIST1, WNT5A, ZIC1, TBX18, SIX2, HEY2, STRA6, CTHRC1, MYO3B\n                \n                \n                  GO:0090596 | sensory organ morphogenesis\n                  19\n                  4.2\n                  3.3e-03\n                  JAG1, COL11A1, DLX5, DSCAM, MSX1, NTRK2, SIX1, TFAP2A, TWIST1, WNT5A, ZIC1, TBX18, SIX2, FJX1, SOX8, STRA6, CTHRC1, MYO3B, HCN1\n                \n                \n                  GO:0042471 | ear morphogenesis\n                  12\n                  2.6\n                  3.6e-03\n                  COL11A1, DLX5, MSX1, SIX1, TFAP2A, TWIST1, WNT5A, ZIC1, TBX18, SIX2, CTHRC1, MYO3B\n                \n                \n                  GO:0090102 | cochlea development\n                  7\n                  1.5\n                  6.5e-03\n                  KCNK2, SIX1, WNT5A, TBX18, HEY2, CTHRC1, MYO3B\n                \n                \n                  GO:0060537 | muscle tissue development\n                  24\n                  5.3\n                  7.4e-03\n                  CENPF, COL11A1, EYA2, FOXC2, GPX1, KCNK2, MSX1, RYR1, SIX1, TP73, TWIST1, WNT5A, BARX2, TBX18, HEY2, SOX8, NOX4, STRA6, MEGF10, MYO18B, MYLK2, DNER, ALPK2, SGCZ\n                \n                \n                  GO:0090103 | cochlea morphogenesis\n                  5\n                  1.1\n                  1.0e-02\n                  SIX1, WNT5A, TBX18, CTHRC1, MYO3B\n                \n                \n                  GO:2000027 | regulation of animal organ morphogenesis\n                  11\n                  2.4\n                  1.0e-02\n                  AGT, CELSR3, MSX1, SFRP2, SIX1, WNT5A, SIX2, SOX8, WNT4, SAPCD2, CTHRC1\n                \n                \n                  GO:0048839 | inner ear development\n                  14\n                  3.1\n                  1.1e-02\n                  JAG1, COL11A1, GSDME, DLX5, KCNK2, MSX1, SIX1, TFAP2A, WNT5A, ZIC1, TBX18, HEY2, CTHRC1, MYO3B\n                \n                \n                  GO:0055001 | muscle cell development\n                  14\n                  3.1\n                  1.1e-02\n                  GPX1, RYR1, SDC1, SIX1, TNNT1, UCHL1, TBX18, HEY2, MEGF10, MYO18B, DNER, ALPK2, WFIKKN1, SGCZ\n                \n                \n                  GO:0048701 | embryonic cranial skeleton morphogenesis\n                  6\n                  1.3\n                  2.2e-02\n                  FOXC2, SIX1, TBX15, TFAP2A, TWIST1, SIX2\n                \n                \n                  GO:0072001 | renal system development\n                  21\n                  4.6\n                  3.1e-03\n                  JAG1, AGT, AKR1B1, CENPF, EMX2, ENPEP, FOXD1, FOXC2, MMP17, SDC1, SIX1, TFAP2A, TP73, WNT5A, TBX18, GCNT3, SIX2, SOX8, WNT4, STRA6, CD24\n                \n                \n                  GO:0090183 | regulation of kidney development\n                  6\n                  1.3\n                  7.2e-03\n                  AGT, FOXD1, SIX1, SIX2, SOX8, WNT4\n                \n                \n                  GO:0001822 | kidney development\n                  19\n                  4.2\n                  1.0e-02\n                  JAG1, AGT, AKR1B1, CENPF, ENPEP, FOXD1, FOXC2, MMP17, SDC1, SIX1, TFAP2A, TP73, WNT5A, GCNT3, SIX2, SOX8, WNT4, STRA6, CD24\n                \n                \n                  GO:1905330 | regulation of morphogenesis of an epithelium\n                  7\n                  1.5\n                  2.7e-02\n                  AGT, SIX1, WNT5A, SIX2, SOX8, WNT4, RNF207\n                \n                \n                  GO:0050921 | positive regulation of chemotaxis\n                  13\n                  2.8\n                  3.4e-03\n                  C3AR1, DSCAM, HSPB1, PGF, THBS4, WNT5A, SCG2, TREM2, CAMK1D, S100A14, TRPV4, SMOC2, IL34\n                \n                \n                  GO:0071622 | regulation of granulocyte chemotaxis\n                  7\n                  1.5\n                  1.1e-02\n                  C3AR1, DPP4, THBS4, CAMK1D, S100A14, TRPV4, IL34\n                \n                \n                  GO:0050920 | regulation of chemotaxis\n                  15\n                  3.3\n                  1.8e-02\n                  C3AR1, DPP4, DSCAM, HSPB1, PGF, THBS4, WNT5A, SCG2, TREM2, SEMA5B, CAMK1D, S100A14, TRPV4, SMOC2, IL34\n                \n                \n                  GO:0002690 | positive regulation of leukocyte chemotaxis\n                  8\n                  1.8\n                  4.7e-02\n                  C3AR1, PGF, THBS4, WNT5A, CAMK1D, S100A14, TRPV4, IL34\n                \n                \n                  GO:0003151 | outflow tract morphogenesis\n                  9\n                  2.0\n                  7.2e-03\n                  JAG1, FOXC2, RYR1, SFRP2, SIX1, TWIST1, WNT5A, DHRS3, HEY2\n                \n                \n                  GO:0048762 | mesenchymal cell differentiation\n                  16\n                  3.5\n                  2.1e-02\n                  JAG1, AGT, COL1A1, FOXC2, LOXL2, MSX1, SFRP2, SIX1, TWIST1, WNT5A, SIX2, HEY2, SOX8, WNT4, SEMA5B, ZNF703\n                \n                \n                  GO:0014706 | striated muscle tissue development\n                  16\n                  3.5\n                  2.2e-02\n                  CENPF, COL11A1, EYA2, FOXC2, KCNK2, MSX1, TP73, TWIST1, WNT5A, TBX18, HEY2, NOX4, MYO18B, MYLK2, ALPK2, SGCZ\n                \n                \n                  GO:0060485 | mesenchyme development\n                  18\n                  3.9\n                  2.9e-02\n                  JAG1, AGT, AMH, COL1A1, FOXD1, FOXC2, LOXL2, MSX1, SFRP2, SIX1, TWIST1, WNT5A, SIX2, HEY2, SOX8, WNT4, SEMA5B, ZNF703\n                \n                \n                  GO:0003007 | heart morphogenesis\n                  15\n                  3.3\n                  4.2e-02\n                  JAG1, COL11A1, FOXC2, MSX1, RYR1, SFRP2, SIX1, TWIST1, WNT5A, DHRS3, HEY2, MYLK2, ALPK2, RBM20, RNF207\n                \n                \n                  GO:0061311 | cell surface receptor signaling pathway involved in heart development\n                  5\n                  1.1\n                  1.3e-02\n                  JAG1, MSX1, WNT5A, HEY2, ALPK2\n                \n                \n                  GO:0120254 | olefinic compound metabolic process\n                  12\n                  2.6\n                  1.9e-02\n                  ABCA4, AKR1B1, ALOX15B, AKR1C1, AKR1C2, GPX1, GRIN1, SRD5A1, PLA2G4C, RDH16, DHRS3, WNT4\n                \n                \n                  GO:0008207 | C21-steroid hormone metabolic process\n                  5\n                  1.1\n                  4.0e-02\n                  AKR1B1, AKR1C1, AKR1C2, SRD5A1, WNT4\n                \n                \n                  GO:0042445 | hormone metabolic process\n                  14\n                  3.1\n                  4.7e-02\n                  AKR1B1, AKR1C1, AKR1C2, DIO2, DPP4, ENPEP, FOXE1, PCSK2, SLC5A5, SRD5A1, RDH16, DHRS3, PCSK1N, WNT4\n                \n        \n      \n    \n\n\n\nThis just shows the second slot inside the EnrichGT_obj object. The second slot - tinytable_obj is a pure object of tinytable package, you can use any function on it.\nFor further usage of tinytable package, please refer to https://vincentarelbundock.github.io/tinytable/vignettes/tinytable.html.\nSee re-enrichment example for further demo.\n\n\n\nFunction egt_generate_quarto_report() can help you convert re-enrichment object to an all-in-one Quarto document containing all enrichment results. You can use RStudio or Positron to knit them (preview) into HTML document.",
    "crumbs": [
      "Home",
      "Visualize results through HTML reports or figures"
    ]
  },
  {
    "objectID": "visualize.html#inline-or-in-dynamic-documents",
    "href": "visualize.html#inline-or-in-dynamic-documents",
    "title": "Visualize results through HTML reports or figures",
    "section": "",
    "text": "Because of the messy result table is hardly to read, EnrichGT help you convert it into pretty tinytable HTML tables. This only supports the re-enriched results.\nYou can simple print by input the object name of re-enriched object or fused object to R console, to show the table. In IDE like RStudio and Positron, you can view the table in View window. You can also integrate to R-based publish systems like rmarkdown, Quarto or litedown. Like this: The default setting is optimized for HTML reports. For Latex reports, you may refer to the document of tinytable.\n\nre_enrich\n\n\n\n    \n\n    \n    \n      \n        \n        Parse form: ora_result;    Split into 10 Clusters. Generated by github@zhimingye/EnrichGT. Time: 2025-04-07 22:48:31.201264\n              \n                Description\n                Count\n                PCT\n                Padj\n                geneID\n              \n        \n        \n        \n                \n                  GO:0035249 | synaptic transmission, glutamatergic\n                  19\n                  4.2\n                  8.1e-08\n                  ATP1A2, GRIA4, GRID2, GRIK2, GRIK3, GRIN1, GRIN2A, GRIN2B, GRIN2D, GRM1, GRM5, GRM8, DGKI, NRXN1, NLGN1, UNC13A, MAPK8IP2, CACNG5, UNC13C\n                \n                \n                  GO:0051966 | regulation of synaptic transmission, glutamatergic\n                  16\n                  3.5\n                  8.1e-08\n                  ATP1A2, GRIK2, GRIK3, GRIN1, GRIN2A, GRIN2B, GRIN2D, GRM1, GRM5, GRM8, DGKI, NRXN1, NLGN1, UNC13A, MAPK8IP2, CACNG5\n                \n                \n                  GO:0050804 | modulation of chemical synaptic transmission\n                  39\n                  8.5\n                  8.1e-08\n                  ACHE, APOE, ATP1A2, CA2, CAMK2B, CDC20, GFAP, GRIA4, GRID2, GRIK2, GRIK3, GRIN1, GRIN2A, GRIN2B, GRIN2D, GRM1, GRM5, GRM8, HRAS, MAP1B, NTRK2, SLC6A1, CNTN2, VGF, WNT5A, INA, DGKI, DLGAP1, NRXN1, RIMS3, NMU, NLGN1, UNC13A, MAPK8IP2, ERC2, CACNG5, LRFN2, UNC13C, SHISA9\n                \n                \n                  GO:0099177 | regulation of trans-synaptic signaling\n                  39\n                  8.5\n                  8.1e-08\n                  ACHE, APOE, ATP1A2, CA2, CAMK2B, CDC20, GFAP, GRIA4, GRID2, GRIK2, GRIK3, GRIN1, GRIN2A, GRIN2B, GRIN2D, GRM1, GRM5, GRM8, HRAS, MAP1B, NTRK2, SLC6A1, CNTN2, VGF, WNT5A, INA, DGKI, DLGAP1, NRXN1, RIMS3, NMU, NLGN1, UNC13A, MAPK8IP2, ERC2, CACNG5, LRFN2, UNC13C, SHISA9\n                \n                \n                  GO:0050808 | synapse organization\n                  36\n                  7.9\n                  2.1e-06\n                  ACHE, APOE, KIF1A, CAMK2B, CDC20, CDH6, CTNNA2, DSCAM, GAP43, GRID2, GRIN2B, GRM5, MAP1B, NRCAM, NTRK2, RAC3, SIX1, SLC6A1, CNTN2, WNT5A, INA, NRXN1, NLGN1, UNC13A, ERC2, IL1RAPL2, SEZ6L2, TREM2, LRFN2, IGSF9, BCAN, SYNDIG1, DNER, ADGRF1, LHFPL4, UNC13C\n                \n                \n                  GO:0048168 | regulation of neuronal synaptic plasticity\n                  12\n                  2.6\n                  4.2e-06\n                  APOE, CAMK2B, GRIK2, GRIN1, GRIN2A, GRIN2B, GRIN2D, GRM5, HRAS, CNTN2, VGF, SHISA9\n                \n                \n                  GO:0007215 | glutamate receptor signaling pathway\n                  11\n                  2.4\n                  5.2e-06\n                  GRIA4, GRID2, GRIK2, GRIK3, GRIN1, GRIN2A, GRIN2B, GRIN2D, GRM1, GRM5, GRM8\n                \n                \n                  GO:0035235 | ionotropic glutamate receptor signaling pathway\n                  8\n                  1.8\n                  1.1e-05\n                  GRIA4, GRID2, GRIK2, GRIK3, GRIN1, GRIN2A, GRIN2B, GRIN2D\n                \n                \n                  GO:0048167 | regulation of synaptic plasticity\n                  20\n                  4.4\n                  4.5e-05\n                  APOE, CAMK2B, CDC20, GFAP, GRID2, GRIK2, GRIN1, GRIN2A, GRIN2B, GRIN2D, GRM5, HRAS, MAP1B, NTRK2, CNTN2, VGF, RIMS3, ERC2, UNC13C, SHISA9\n                \n                \n                  GO:0060078 | regulation of postsynaptic membrane potential\n                  16\n                  3.5\n                  8.5e-05\n                  GABRD, GRIA4, GRID2, GRIK2, GRIK3, GRIN1, GRIN2A, GRIN2B, GRIN2D, GRM1, GRM5, HTR3A, NRXN1, NLGN1, MAPK8IP2, HCN1\n                \n                \n                  GO:0007094 | mitotic spindle assembly checkpoint signaling\n                  11\n                  2.4\n                  4.2e-06\n                  BIRC5, BUB1, CCNB1, CDC20, CENPF, PLK1, NDC80, ZWINT, CDCA8, NUF2, SPC24\n                \n                \n                  GO:0071174 | mitotic spindle checkpoint signaling\n                  11\n                  2.4\n                  4.2e-06\n                  BIRC5, BUB1, CCNB1, CDC20, CENPF, PLK1, NDC80, ZWINT, CDCA8, NUF2, SPC24\n                \n                \n                  GO:0071173 | spindle assembly checkpoint signaling\n                  11\n                  2.4\n                  4.2e-06\n                  BIRC5, BUB1, CCNB1, CDC20, CENPF, PLK1, NDC80, ZWINT, CDCA8, NUF2, SPC24\n                \n                \n                  GO:0031577 | spindle checkpoint signaling\n                  11\n                  2.4\n                  4.2e-06\n                  BIRC5, BUB1, CCNB1, CDC20, CENPF, PLK1, NDC80, ZWINT, CDCA8, NUF2, SPC24\n                \n                \n                  GO:0010965 | regulation of mitotic sister chromatid separation\n                  12\n                  2.6\n                  4.2e-06\n                  BIRC5, BUB1, CCNB1, CDC20, CENPF, PLK1, NDC80, UBE2C, ZWINT, CDCA8, NUF2, SPC24\n                \n                \n                  GO:0045841 | negative regulation of mitotic metaphase/anaphase transition\n                  11\n                  2.4\n                  4.2e-06\n                  BIRC5, BUB1, CCNB1, CDC20, CENPF, PLK1, NDC80, ZWINT, CDCA8, NUF2, SPC24\n                \n                \n                  GO:0033048 | negative regulation of mitotic sister chromatid segregation\n                  11\n                  2.4\n                  4.2e-06\n                  BIRC5, BUB1, CCNB1, CDC20, CENPF, PLK1, NDC80, ZWINT, CDCA8, NUF2, SPC24\n                \n                \n                  GO:2000816 | negative regulation of mitotic sister chromatid separation\n                  11\n                  2.4\n                  4.2e-06\n                  BIRC5, BUB1, CCNB1, CDC20, CENPF, PLK1, NDC80, ZWINT, CDCA8, NUF2, SPC24\n                \n                \n                  GO:0033046 | negative regulation of sister chromatid segregation\n                  11\n                  2.4\n                  4.2e-06\n                  BIRC5, BUB1, CCNB1, CDC20, CENPF, PLK1, NDC80, ZWINT, CDCA8, NUF2, SPC24\n                \n                \n                  GO:0051985 | negative regulation of chromosome segregation\n                  11\n                  2.4\n                  5.2e-06\n                  BIRC5, BUB1, CCNB1, CDC20, CENPF, PLK1, NDC80, ZWINT, CDCA8, NUF2, SPC24\n                \n                \n                  GO:0007626 | locomotory behavior\n                  18\n                  3.9\n                  2.5e-04\n                  ALK, APOE, ATP1A2, DPP4, DSCAM, GAD1, GPR37, GRIN2D, GRM1, GRM5, SLC6A3, CNTN2, UCHL1, ZIC1, RASD2, ANKH, PPP1R1B, CIART\n                \n                \n                  GO:0001964 | startle response\n                  6\n                  1.3\n                  2.7e-03\n                  CTNNA2, GRID2, GRIN2A, GRIN2D, SLC6A3, CNTNAP2\n                \n                \n                  GO:0008038 | neuron recognition\n                  7\n                  1.5\n                  5.4e-03\n                  DSCAM, GAP43, NRCAM, OPCML, CNTN2, CNTNAP2, IGSF9\n                \n                \n                  GO:0008037 | cell recognition\n                  13\n                  2.8\n                  5.4e-03\n                  C4BPB, DSCAM, FOLR2, GAP43, NRCAM, OPCML, CNTN2, ZAN, CNTNAP2, TREM2, IGSF9, MEGF10, ATP8B3\n                \n                \n                  GO:0015669 | gas transport\n                  5\n                  1.1\n                  7.2e-03\n                  CA2, HBA1, HBA2, HBB, MB\n                \n                \n                  GO:0042542 | response to hydrogen peroxide\n                  10\n                  2.2\n                  7.8e-03\n                  COL1A1, CRYAB, NQO1, GPX1, HBA1, HBA2, HBB, HMOX1, SDC1, TRPM2\n                \n                \n                  GO:0021700 | developmental maturation\n                  20\n                  4.4\n                  7.8e-03\n                  AKR1B1, CAMK2B, CDC20, MAP1B, NKX6-1, NRCAM, RAC3, RYR1, CNTN2, WNT5A, NRXN1, NLGN1, UNC13A, CNTNAP2, SEZ6L2, TFCP2L1, SOX8, BCAN, TDRD5, UNC13C\n                \n                \n                  GO:0050905 | neuromuscular process\n                  13\n                  2.8\n                  7.8e-03\n                  CTNNA2, FOXS1, GRID2, GRIN2A, GRIN2D, RAC3, SLC6A3, TNNT1, UCHL1, NRXN1, CNTNAP2, STRA6, STAC2\n                \n                \n                  GO:0014074 | response to purine-containing compound\n                  12\n                  2.6\n                  8.4e-03\n                  HCN2, COL1A1, ENPP1, RYR1, SDC1, SLC5A5, SLC6A1, SLC6A3, SRD5A1, TRPM2, VGF, HCN1\n                \n                \n                  GO:0007409 | axonogenesis\n                  24\n                  5.3\n                  1.1e-02\n                  APLP1, APOE, CTNNA2, DLX5, DSCAM, FOXD1, GAP43, KIF5C, MAG, MAP1B, NKX6-1, NRCAM, NTRK2, RAC3, CNTN2, UCHL1, WNT5A, NRXN1, FSTL4, SEMA5B, DPYSL5, IGSF9, KIAA1755, EPHA10\n                \n                \n                  GO:0045664 | regulation of neuron differentiation\n                  17\n                  3.7\n                  6.7e-04\n                  JAG1, ALK, MAG, MAP1B, NKX6-1, NRCAM, RAC3, SFRP2, SIX1, CNTN2, TP73, ZNF536, NLGN1, HEY2, SOX8, ASPM, WDR62\n                \n                \n                  GO:0051960 | regulation of nervous system development\n                  27\n                  5.9\n                  2.2e-03\n                  ACAN, CAMK2B, HAPLN1, DSCAM, GFAP, GRID2, GRM5, MAG, MAP1B, NKX6-1, NTRK2, TP73, WNT5A, NRXN1, NLGN1, FSTL4, HEY2, DAAM2, SOX8, TREM2, SEMA5B, DPYSL5, BCAN, SYNDIG1, IL34, ASPM, WDR62\n                \n                \n                  GO:0051962 | positive regulation of nervous system development\n                  20\n                  4.4\n                  2.2e-03\n                  ACAN, CAMK2B, HAPLN1, DSCAM, GFAP, GRID2, GRM5, MAG, MAP1B, NKX6-1, NTRK2, TP73, NRXN1, NLGN1, SOX8, BCAN, SYNDIG1, IL34, ASPM, WDR62\n                \n                \n                  GO:0050767 | regulation of neurogenesis\n                  23\n                  5.0\n                  5.3e-03\n                  ACAN, CAMK2B, HAPLN1, DSCAM, GFAP, GRM5, MAG, MAP1B, NKX6-1, NTRK2, TP73, WNT5A, FSTL4, HEY2, DAAM2, SOX8, TREM2, SEMA5B, DPYSL5, BCAN, IL34, ASPM, WDR62\n                \n                \n                  GO:0050769 | positive regulation of neurogenesis\n                  16\n                  3.5\n                  1.1e-02\n                  ACAN, CAMK2B, HAPLN1, DSCAM, GFAP, GRM5, MAG, MAP1B, NKX6-1, NTRK2, TP73, SOX8, BCAN, IL34, ASPM, WDR62\n                \n                \n                  GO:0001764 | neuron migration\n                  13\n                  2.8\n                  1.4e-02\n                  CAMK2B, CTNNA2, EMX2, MAP1B, NKX6-1, NRCAM, NTRK2, SPOCK1, CNTN2, TWIST1, DNER, ASPM, WDR62\n                \n                \n                  GO:0048638 | regulation of developmental growth\n                  19\n                  4.2\n                  1.5e-02\n                  APOE, DSCAM, FOXC2, FOXS1, KCNK2, MAG, MAP1B, NKX6-1, NRCAM, SIX1, SLC6A3, TP73, WNT5A, AGR2, UNC13A, FSTL4, HEY2, SEMA5B, GPAM\n                \n                \n                  GO:0010975 | regulation of neuron projection development\n                  23\n                  5.0\n                  2.2e-02\n                  ALK, APOE, KIF1A, CAMK2B, CTNNA2, DSCAM, GFAP, GRID2, MAG, MAP1B, NRCAM, NTRK2, SDC2, SFRP2, SPOCK1, CNTN2, WNT5A, NLGN1, FSTL4, SEMA5B, DPYSL5, CAMK1D, TRPV4\n                \n                \n                  GO:0010001 | glial cell differentiation\n                  15\n                  3.3\n                  3.4e-02\n                  ACAN, HAPLN1, GAP43, GFAP, MAG, NKX6-1, NTRK2, CNTN2, TP73, DAAM2, SOX8, TREM2, BCAN, DNER, IL34\n                \n                \n                  GO:0061387 | regulation of extent of cell growth\n                  9\n                  2.0\n                  3.4e-02\n                  APOE, DSCAM, MAG, MAP1B, NKX6-1, NRCAM, WNT5A, FSTL4, SEMA5B\n                \n                \n                  GO:0043583 | ear development\n                  17\n                  3.7\n                  2.2e-03\n                  JAG1, COL11A1, GSDME, DLX5, KCNK2, MSX1, SIX1, TFAP2A, TWIST1, WNT5A, ZIC1, TBX18, SIX2, HEY2, STRA6, CTHRC1, MYO3B\n                \n                \n                  GO:0090596 | sensory organ morphogenesis\n                  19\n                  4.2\n                  3.3e-03\n                  JAG1, COL11A1, DLX5, DSCAM, MSX1, NTRK2, SIX1, TFAP2A, TWIST1, WNT5A, ZIC1, TBX18, SIX2, FJX1, SOX8, STRA6, CTHRC1, MYO3B, HCN1\n                \n                \n                  GO:0042471 | ear morphogenesis\n                  12\n                  2.6\n                  3.6e-03\n                  COL11A1, DLX5, MSX1, SIX1, TFAP2A, TWIST1, WNT5A, ZIC1, TBX18, SIX2, CTHRC1, MYO3B\n                \n                \n                  GO:0090102 | cochlea development\n                  7\n                  1.5\n                  6.5e-03\n                  KCNK2, SIX1, WNT5A, TBX18, HEY2, CTHRC1, MYO3B\n                \n                \n                  GO:0060537 | muscle tissue development\n                  24\n                  5.3\n                  7.4e-03\n                  CENPF, COL11A1, EYA2, FOXC2, GPX1, KCNK2, MSX1, RYR1, SIX1, TP73, TWIST1, WNT5A, BARX2, TBX18, HEY2, SOX8, NOX4, STRA6, MEGF10, MYO18B, MYLK2, DNER, ALPK2, SGCZ\n                \n                \n                  GO:0090103 | cochlea morphogenesis\n                  5\n                  1.1\n                  1.0e-02\n                  SIX1, WNT5A, TBX18, CTHRC1, MYO3B\n                \n                \n                  GO:2000027 | regulation of animal organ morphogenesis\n                  11\n                  2.4\n                  1.0e-02\n                  AGT, CELSR3, MSX1, SFRP2, SIX1, WNT5A, SIX2, SOX8, WNT4, SAPCD2, CTHRC1\n                \n                \n                  GO:0048839 | inner ear development\n                  14\n                  3.1\n                  1.1e-02\n                  JAG1, COL11A1, GSDME, DLX5, KCNK2, MSX1, SIX1, TFAP2A, WNT5A, ZIC1, TBX18, HEY2, CTHRC1, MYO3B\n                \n                \n                  GO:0055001 | muscle cell development\n                  14\n                  3.1\n                  1.1e-02\n                  GPX1, RYR1, SDC1, SIX1, TNNT1, UCHL1, TBX18, HEY2, MEGF10, MYO18B, DNER, ALPK2, WFIKKN1, SGCZ\n                \n                \n                  GO:0048701 | embryonic cranial skeleton morphogenesis\n                  6\n                  1.3\n                  2.2e-02\n                  FOXC2, SIX1, TBX15, TFAP2A, TWIST1, SIX2\n                \n                \n                  GO:0072001 | renal system development\n                  21\n                  4.6\n                  3.1e-03\n                  JAG1, AGT, AKR1B1, CENPF, EMX2, ENPEP, FOXD1, FOXC2, MMP17, SDC1, SIX1, TFAP2A, TP73, WNT5A, TBX18, GCNT3, SIX2, SOX8, WNT4, STRA6, CD24\n                \n                \n                  GO:0090183 | regulation of kidney development\n                  6\n                  1.3\n                  7.2e-03\n                  AGT, FOXD1, SIX1, SIX2, SOX8, WNT4\n                \n                \n                  GO:0001822 | kidney development\n                  19\n                  4.2\n                  1.0e-02\n                  JAG1, AGT, AKR1B1, CENPF, ENPEP, FOXD1, FOXC2, MMP17, SDC1, SIX1, TFAP2A, TP73, WNT5A, GCNT3, SIX2, SOX8, WNT4, STRA6, CD24\n                \n                \n                  GO:1905330 | regulation of morphogenesis of an epithelium\n                  7\n                  1.5\n                  2.7e-02\n                  AGT, SIX1, WNT5A, SIX2, SOX8, WNT4, RNF207\n                \n                \n                  GO:0050921 | positive regulation of chemotaxis\n                  13\n                  2.8\n                  3.4e-03\n                  C3AR1, DSCAM, HSPB1, PGF, THBS4, WNT5A, SCG2, TREM2, CAMK1D, S100A14, TRPV4, SMOC2, IL34\n                \n                \n                  GO:0071622 | regulation of granulocyte chemotaxis\n                  7\n                  1.5\n                  1.1e-02\n                  C3AR1, DPP4, THBS4, CAMK1D, S100A14, TRPV4, IL34\n                \n                \n                  GO:0050920 | regulation of chemotaxis\n                  15\n                  3.3\n                  1.8e-02\n                  C3AR1, DPP4, DSCAM, HSPB1, PGF, THBS4, WNT5A, SCG2, TREM2, SEMA5B, CAMK1D, S100A14, TRPV4, SMOC2, IL34\n                \n                \n                  GO:0002690 | positive regulation of leukocyte chemotaxis\n                  8\n                  1.8\n                  4.7e-02\n                  C3AR1, PGF, THBS4, WNT5A, CAMK1D, S100A14, TRPV4, IL34\n                \n                \n                  GO:0003151 | outflow tract morphogenesis\n                  9\n                  2.0\n                  7.2e-03\n                  JAG1, FOXC2, RYR1, SFRP2, SIX1, TWIST1, WNT5A, DHRS3, HEY2\n                \n                \n                  GO:0048762 | mesenchymal cell differentiation\n                  16\n                  3.5\n                  2.1e-02\n                  JAG1, AGT, COL1A1, FOXC2, LOXL2, MSX1, SFRP2, SIX1, TWIST1, WNT5A, SIX2, HEY2, SOX8, WNT4, SEMA5B, ZNF703\n                \n                \n                  GO:0014706 | striated muscle tissue development\n                  16\n                  3.5\n                  2.2e-02\n                  CENPF, COL11A1, EYA2, FOXC2, KCNK2, MSX1, TP73, TWIST1, WNT5A, TBX18, HEY2, NOX4, MYO18B, MYLK2, ALPK2, SGCZ\n                \n                \n                  GO:0060485 | mesenchyme development\n                  18\n                  3.9\n                  2.9e-02\n                  JAG1, AGT, AMH, COL1A1, FOXD1, FOXC2, LOXL2, MSX1, SFRP2, SIX1, TWIST1, WNT5A, SIX2, HEY2, SOX8, WNT4, SEMA5B, ZNF703\n                \n                \n                  GO:0003007 | heart morphogenesis\n                  15\n                  3.3\n                  4.2e-02\n                  JAG1, COL11A1, FOXC2, MSX1, RYR1, SFRP2, SIX1, TWIST1, WNT5A, DHRS3, HEY2, MYLK2, ALPK2, RBM20, RNF207\n                \n                \n                  GO:0061311 | cell surface receptor signaling pathway involved in heart development\n                  5\n                  1.1\n                  1.3e-02\n                  JAG1, MSX1, WNT5A, HEY2, ALPK2\n                \n                \n                  GO:0120254 | olefinic compound metabolic process\n                  12\n                  2.6\n                  1.9e-02\n                  ABCA4, AKR1B1, ALOX15B, AKR1C1, AKR1C2, GPX1, GRIN1, SRD5A1, PLA2G4C, RDH16, DHRS3, WNT4\n                \n                \n                  GO:0008207 | C21-steroid hormone metabolic process\n                  5\n                  1.1\n                  4.0e-02\n                  AKR1B1, AKR1C1, AKR1C2, SRD5A1, WNT4\n                \n                \n                  GO:0042445 | hormone metabolic process\n                  14\n                  3.1\n                  4.7e-02\n                  AKR1B1, AKR1C1, AKR1C2, DIO2, DPP4, ENPEP, FOXE1, PCSK2, SLC5A5, SRD5A1, RDH16, DHRS3, PCSK1N, WNT4\n                \n        \n      \n    \n\n\n\nThis just shows the second slot inside the EnrichGT_obj object. The second slot - tinytable_obj is a pure object of tinytable package, you can use any function on it.\nFor further usage of tinytable package, please refer to https://vincentarelbundock.github.io/tinytable/vignettes/tinytable.html.\nSee re-enrichment example for further demo.",
    "crumbs": [
      "Home",
      "Visualize results through HTML reports or figures"
    ]
  },
  {
    "objectID": "visualize.html#quarto-full-report",
    "href": "visualize.html#quarto-full-report",
    "title": "Visualize results through HTML reports or figures",
    "section": "",
    "text": "Function egt_generate_quarto_report() can help you convert re-enrichment object to an all-in-one Quarto document containing all enrichment results. You can use RStudio or Positron to knit them (preview) into HTML document.",
    "crumbs": [
      "Home",
      "Visualize results through HTML reports or figures"
    ]
  },
  {
    "objectID": "visualize.html#basic-result-plot",
    "href": "visualize.html#basic-result-plot",
    "title": "Visualize results through HTML reports or figures",
    "section": "Basic result plot",
    "text": "Basic result plot\nThe Dot Plot provide basic viewing of results. So it supports both simple enrichment result data.frame and re-enriched egt_object.\nYou can adjust this figure by these params:\n\nntop: Show top N in each cluster. In default, for origin enriched result, showing top 15; for re-clustered object, showing top 5 in each cluster.\nshowIDs: bool, show pathway IDs or not. Default is FALSE\nmax_len_descript: the label format length, default as 40.\nP.adj: If pass an origin data.frame from original enriched result, you can specify the P-adjust value cut off. If is null, default is 0.05. When passing EnrichGT_obj, this filter is previously done by egt_recluster_analysis.\nlow.col: the color for the lowest\nhi.col: the color for the highest\n\n\nPloting ORA result\n\negt_plot_results(ora_result)\n\nℹ Use Default P-adjust cut-off 0.05. You can pass `P.adj=xxx` arugument to filter. \n\n\n! You are drawing origin results, for better result you can re-cluster it by egt_recluster_analysis()\n\n\n\n\n\n\n\n\n\n\n\nPloting GSEA result\n\negt_plot_results(resGSEA)\n\nℹ Use Default P-adjust cut-off 0.05. You can pass `P.adj=xxx` arugument to filter. \n\n\n! You are drawing origin results, for better result you can re-cluster it by egt_recluster_analysis()\n\n\n\n\n\n\n\n\n\n\n\nPloting re-enrichment result\n\negt_plot_results(re_enrich)",
    "crumbs": [
      "Home",
      "Visualize results through HTML reports or figures"
    ]
  },
  {
    "objectID": "visualize.html#additional-gsea-plots",
    "href": "visualize.html#additional-gsea-plots",
    "title": "Visualize results through HTML reports or figures",
    "section": "Additional GSEA plots",
    "text": "Additional GSEA plots\nSince version 0.8.6, EnrichGT provides a function called egt_plot_gsea() to help users to get typical ranking plots. If you pass a pathway name to the first param of this function, egt_plot_gsea() will return a ranking plot of single pathway. For multiple pathway, you need to subset the data.frame result of egt_gsea_analysis().\nThe param contains:\n\nx: A GSEA result object. Can be either:\n\nA data frame containing GSEA results (requires columns: pvalue, p.adjust, Description)\nA character string specifying a single pathway name\n\ngenes and database should be the same as you doing egt_gsea_analysis()\n\n\n\n\n\n\n\nWhy multiple results plotting function needs a data.frame\n\n\n\nYou can see the result figure, we need the NES and p-values for display.\n\n\n\nSingle ranking plot\nYou need to prepare your favourite pathway’s name:\n\n1class(resGSEA$Description[1])\n2resGSEA$Description[1]\n\n\n1\n\nThis is a vector.\n\n2\n\nIf you need the single-plot, all you pass to egt_plot_gsea() is the name of this pathway, subset from resGSEA.\n\n\n\n\n[1] \"character\"\n[1] \"regulation of postsynaptic membrane potential\"\n\n\nAnd then using egt_plot_gsea() for drawing. The other params should be the same as you provided in origin GSEA analysis.\n\negt_plot_gsea(resGSEA$Description[1],\n              genes = genes_with_weights(genes = DEGexample$...1, \n                                              weights = DEGexample$log2FoldChange),\n              database = database_GO_BP(org.Hs.eg.db))\n\n✔ success loaded database, time used : 17.9029018878937 sec.\n\n\n\n\n\n\n\n\n\n\n\nTable-like visualization GSEA result\n\n\n\n\n\n\nWarning\n\n\n\nIf you want to plot this plot, remember to filter the GSEA results to ~10 to ~20, you can base on NES or p-values. This is to avoid too many loading to this plotting.\n\n\nYou need to subset the origin GSEA result data.frame according to NES or p-val to gain your targets. In this demo, we choose row 1 to row 8.\n\n1class(resGSEA[1:8,])\n2resGSEA[1:8,]\n\n\n1\n\nThis is a data.frame. Please subset it to avoid too many results and the waste of time.\n\n2\n\nYou need to subset data frame according to NES (suggests: abs(NES)&gt;1) and p-value, too avoiding too many outputs and wasting.\n\n\n\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n# A tibble: 8 × 7\n  ID         Description               ES   NES  pvalue p.adjust core_enrichment\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;          \n1 GO:0060078 regulation of postsyn… 0.564  1.94 4.60e-6 0.000188 GRIK3/HCN1/GRM…\n2 GO:0007216 G protein-coupled glu… 0.840  1.92 1.31e-4 0.00295  GRIK3/GRM1/GRM…\n3 GO:0050907 detection of chemical… 0.767  1.92 1.55e-4 0.00342  OR51E1/CST1/OR…\n4 GO:0035249 synaptic transmission… 0.560  1.92 1.87e-5 0.000621 GRIK3/UNC13C/G…\n5 GO:0050906 detection of stimulus… 0.594  1.90 4.98e-5 0.00136  OR51E1/CST1/OR…\n6 GO:0061982 meiosis I cell cycle … 0.553  1.87 1.09e-4 0.00259  SPATA22/KASH5/…\n7 GO:0051966 regulation of synapti… 0.581  1.87 7.66e-5 0.00191  GRIK3/GRM1/CAC…\n8 GO:0031577 spindle checkpoint si… 0.627  1.86 5.57e-4 0.00905  SPC24/BIRC5/PL…\n\n\nAnd then using egt_plot_gsea() for drawing. The other params should be the same as you provided in origin GSEA analysis.\n\negt_plot_gsea(resGSEA[1:8,], \n              genes = genes_with_weights(genes = DEGexample$...1, \n                                              weights = DEGexample$log2FoldChange),\n              database = database_GO_BP(org.Hs.eg.db))\n\n✔ Use cached database: GO_BP_org.Hs.eg.db",
    "crumbs": [
      "Home",
      "Visualize results through HTML reports or figures"
    ]
  },
  {
    "objectID": "visualize.html#umap-plot-for-re-enrichment-no-longer-supported",
    "href": "visualize.html#umap-plot-for-re-enrichment-no-longer-supported",
    "title": "Visualize results through HTML reports or figures",
    "section": "UMAP plot for re-enrichment (no longer supported)",
    "text": "UMAP plot for re-enrichment (no longer supported)\nBefore version 0.8.6, UMAP plot is provided in re-enriched egt_object, to show the dimensionality reduction view of enriched results.\nA word frequency matrix represents the frequency of words or tokens across different documents or text samples. Each row corresponds to a document, and each column represents a word or token, with the cell values indicating the frequency of the respective word in that document.However, high-dimensional data like word frequency matrices can be challenging to interpret directly. To make such data easier to analyze, we can reduce its dimensionality and visualize the patterns or clusters in a 2D or 3D space. UMAP (Uniform Manifold Approximation and Projection) is a powerful, non-linear dimensionality reduction technique widely used for this purpose.\nBut since 0.8.6, because umap and ggrepel have too many dependencies, and this function is not nesessary in most of cases. We now don’t support it. If you still needs this figure, you can execute following code.\nlibrary(umap)\nlibrary(ggrepel)\nmat&lt;-x@document_term_matrix\numap_result &lt;- umap::umap(mat)\numap_df &lt;- data.frame(ID=rownames(umap_result[[\"layout\"]]),\n                      UMAP1 = umap_result$layout[, 1],\n                      UMAP2 = umap_result$layout[, 2])\nudf&lt;-x@enriched_result |&gt; left_join(umap_df,by=\"ID\")\nfig&lt;-ggplot(udf, aes(x = UMAP1, y = UMAP2, color = Cluster)) +\n  geom_point(size = 2) +\n  geom_text_repel(aes(label = Description),\n                  size = 3,\n                  max.overlaps = 20,\n                  box.padding = 0.3,\n                  point.padding = 0.2) +\n  labs(title = \"Enrichment Results\",\n        x = \"UMAP1\", y = \"UMAP2\") +\n  theme_classic()\nfig",
    "crumbs": [
      "Home",
      "Visualize results through HTML reports or figures"
    ]
  },
  {
    "objectID": "basic.html",
    "href": "basic.html",
    "title": "Basic Workflow",
    "section": "",
    "text": "This is a minimal example. For details, please see following articles on the left of website.\n\nBasic enrichment analysis involves performing a batch “dictionary lookup” for a set of genes to determine their associations. The most commonly used method is over-representation analysis (ORA). If you also have information on weights, then Gene Set Enrichment Analysis (GSEA) is another classic choice. After getting enriched result, a re-enrich analysis may help you to get more insightful result.\n\n\nORA\nlibrary(dplyr)\nlibrary(tibble)\n1library(org.Hs.eg.db)\nlibrary(gt)\nlibrary(EnrichGT)\nlibrary(readr)\n\nDEGexample &lt;- read_csv(\"~/Documents/4Fun/EGTFun/DEG.csv\")\nDEGexample2 &lt;- DEGexample |&gt; dplyr::filter(pvalue&lt;0.05)\nDEGexample_UpReg &lt;- DEGexample |&gt; dplyr::filter(pvalue&lt;0.05,log2FoldChange&gt;0.7)\nDEGs &lt;- DEGexample_UpReg$...1\n# The first example: \nora_result &lt;- egt_enrichment_analysis(\n2                genes = DEGs,\n3                database = database_Reactome(OrgDB = org.Hs.eg.db)\n                )\n# The second example: \nanother_example &lt;- egt_enrichment_analysis(\n4                genes = genes_with_weights(DEGexample2$...1,DEGexample2$log2FoldChange),\n5                database = database_GO_BP(org.Hs.eg.db))\n# Ploting\n6egt_plot_results(ora_result,showIDs = T,ntop = 20)\n\n1\n\nEnrichGT use AnnotationDbi for fetching most of databases and gene annotations. If throwing an error, please re-check this step;\n\n2\n\nORA just need 2 input. The first is a character vector containg gene symbols like c(\"TP53\",\"PLP1\",\"FABP1\",\"VCAM1\");\n\n3\n\nThe second is your favourite database. EnrichGT supports many. See Database usage;\n\n4\n\nOr you want input genes with direction. See enrichment details;\n\n5\n\nEnriching using Gene Ontology BP;\n\n6\n\nShowing enrichment result as figure. See more in visualization help.\n\n\n\n\nRe-enrichment\nThis support the ORA output from both EnrichGT and clusterProfiler. So you can use your favourite tool to achieve this.\n1re_enrichment_results &lt;- egt_recluster_analysis(ora_result)\n2re_enrichment_results\n3egt_plot_results(re_enrichment_results,ntop = 3)\n4egt_plot_umap(re_enrichment_results)\n5re_enrichment_results |&gt; egt_infer_act(DB = \"collectri\", species = \"human\")\n\n1\n\nDoing re-enrichment analysis (See Re-enrichment usage);\n\n2\n\nShowing GT HTML report, see more in visualization help;\n\n3\n\nViewing re-enrichment result as dot plot, see more in visualization help;\n\n4\n\nViewing re-enrichment result as UMAP plot, see more in visualization help;\n\n5\n\nInfering TF/pathway activity, experimential, might not be correct, see more in re-enrichment help.\n\n\n\n\nAI-based annotations\nSee more in large language models integration\nlibrary(ellmer)\ndsAPI &lt;- \"sk-**********\" \n1chat &lt;- chat_deepseek(api_key = dsAPI, model = \"deepseek-chat\", system_prompt = \"\")\nre_enrichment_results &lt;- egt_llm_summary(re_enrichment_results, chat)\n2re_enrichment_results$Cluster_1\n\n1\n\nIn this step we create a DeepSeek interface. We use ellmer for LLM support. For details please refer to ellmer tidyverse website. It provides a uniform interface for most of LLMs in R.\n\n2\n\nDisplay annotation by LLM.\n\n\n\n\nGSEA\nIf you have a set of genes with known weight like log2FC, or the loading from PCA or NMF…\nGSEAexample &lt;- egt_gsea_analysis(\n            genes = \n1              genes_with_weights(DEGexample2$...1,DEGexample2$log2FoldChange),\n            database = \n2              database_from_gmt(\"gmt_file.gmt\")\n            )\n3egt_plot_results(GSEAexample)\negt_plot_gsea(GSEAexample$Description[1],\n              genes = genes_with_weights(genes = DEGexample2$...1, \n                                              weights = DEGexample2$log2FoldChange),\n4              database = database_GO_BP(org.Hs.eg.db))\n5egt_plot_gsea(GSEAexample$Description[1:10,],\n              genes = genes_with_weights(genes = DEGexample2$...1, \n                                              weights = DEGexample2$log2FoldChange),\n6              database = database_GO_BP(org.Hs.eg.db))\n\n1\n\nGSEA is also supported, see enrichment details. genes_with_weights() is used to generate weighted genes;\n\n2\n\nAdditional pathway information like GMT file or table is also supported. See Database usage.\n\n3\n\nShowing basic bar plot for results, see more in visualization help;\n\n4\n\nSingle ranking plot, see more in visualization help;\n\n5\n\nPlease subset it to avoid too many results and the waste of time;\n\n6\n\nShowing table-like result in figure, see more in visualization help.\n\n\n\n\nFusing ORA results\nThis function support the ORA output from both EnrichGT and clusterProfiler. So you can use your favourite tool to achieve this.\n# Fusing results: \n1ora_result_A &lt;- egt_enrichment_analysis(genes = DEGs, database = database_Reactome(OrgDB = org.Hs.eg.db))\n2ora_result_B &lt;- egt_enrichment_analysis(genes = DEGs, database = database_kegg(kegg_organism = \"hsa\",OrgDB = org.Hs.eg.db))\n3fused_result &lt;- egt_recluster_analysis(list(ora_result_A,ora_result_B))\n\n1\n\nORA result 1 with Reactome;\n\n2\n\nORA result 2 with KEGG;\n\n3\n\nFuse together.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nOnly same source of enrichment results can be merge.\nFor example, the result of\negt_enrichment_analysis(genes = DEGs, database = database_Reactome(OrgDB = org.Hs.eg.db))\nand\negt_enrichment_analysis(genes = DEGs, database = database_kegg(OrgDB = org.Hs.eg.db))\ncan be merged,\nbut the result of\negt_enrichment_analysis(genes = DEGs, database = database_Reactome(OrgDB = org.Hs.eg.db))\nand\negt_enrichment_analysis(genes = genes_with_weights(DEGexample2$...1,DEGexample2$log2FoldChange), database = database_kegg(OrgDB = org.Hs.eg.db))\nCAN’T be merged.\nIf you have ORA results that want to compare, please use egt_compare_groups().\n\n\n\n\nGene Annotation Converter\n1IDs_of_genes &lt;- convert_annotations_genes(DEGexample$...1[1:10], from_what=\"SYMBOL\", to_what=c(\"ENTREZID\",\"ENSEMBL\",\"GENENAME\"), OrgDB=org.Hs.eg.db)\n\n1\n\nJust told it from what and to what :)\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Basic Workflow"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EnrichGT: all-in-one enrichment analysis",
    "section": "",
    "text": "Intro\n\n\n\n\n\n\n\n\n\n\n\n\nHighlights\n\n\n\n\n\n\n\n\n\nEnrichGT means enriching previously enriched results (\\(E^2_{\\text{enrich}}\\)) into great tables and more …\n\n\n\n\nEfficient C++-based functions for rapid enrichment analysis\n\n\nSimple input format, empowering non-pro users\n\n\nRe-clustering of enriched results provides clear and actionable insights\n\n\nUser-friendly HTML output that is easy to read and interpret\n\n\nAI (LLM) based result annotation\n\n\nDo a series of things just in ONE package\n\n\n\n\n\n\n\n\n\n\n\nAim and Scope\n\n\n\n\n\nPlease note that the primary goal of EnrichGT is to provide researchers in wet labs, who have been busy all day, with quick and insightful biological interpretations from dry lab data to support their experiments. Therefore, all computational methods employed are relatively straightforward and pragmatic. For example, C++ based ORA enrichment function, GSEA only using fgsea output without more analysis, use only vocabulary frequency matrix for re-enrichment instead of term’s similarity, and more… Its purpose is to offer a “quick overview”. After this initial overview, you can use more widely recognized tools to generate statistically rigorous results (not necessary though). However, don’t misunderstand—this does not mean that the statistical processes in EnrichGT are incorrect. I’ve made every effort to ensure their accuracy; they are just less refined. Additionally, the tool has been tested in most typical scenarios, but extreme cases cannot be entirely ruled out.\nThis package was developed under the inspiration of clusterProfiler (a wonderful and powerful package! I have learned a lot. Without it I won’t develop EnrichGT.), but none of EnrichGT’s internal functions rely on any clusterProfiler functions. Some database-loading code references clusterProfiler‘s implementation, but it has been extensively modified to provide lightweight experience. In other words, this is not a case of rebranding clusterProfiler under a different name. It’s a lightweight implementation designed to wet-labs. If you need a tool that handles every detail, please use clusterProfiler instead. Please see acknowledgment page for citing clusterProfiler.\n\n\n\n\n\nInstall EnrichGT\ninstall.packages(\"pak\")\npak::pkg_install(\"ZhimingYe/EnrichGT\")\nThe AnnotationDbi, fgsea, reactome.db and GO.db were from BioConductor and might be slow to install. If you can’t install, please re-check your web connections or update your R and BioConductor, or use Posit Package Manager to install when using old R.\n\n\nMeet EnrichGT\nPlease see articles on the left! Especially the basic workflow introduction.\n\n\n\n\n\n\nTip\n\n\n\nSee package function page for further detail params of functions. (For example, how to use a function)\nYou can use ? function to get further help when installed.\n?egt_recluster_analysis\n\n\nIn most examples of this document, we use a result table of DEG analysis DEG.csv. The gene symbols of DEG.csv is on the first column without column name. In default read_csv() convert the unamed column name to ...1. So DEGtable$...1 refers to gene symbols.\n\n\nOverview\n\n\n\n\n\ngraph LR\n    \n    M[genes]\n    N[genes with weights]\n    \n    subgraph Enrichment Analysis\n        A[egt_enrichment_analysis]\n        B[egt_gsea_analysis]\n    end\n\n    subgraph Pathway Databases\n        D[database_* funcs]\n    end\n\n    subgraph Visualize results\n        P1[egt_plot_results]\n        P2[egt_plot_gsea]\n    end\n\n    subgraph egt_recluster_analysis\n        K1[Pretty table]\n        K2[AI Annotation]\n        CC[cluster modules]\n        MG[gene modules]\n    end\n\n    subgraph Pathway Act. and TF infer \n        \n        I[egt_infer]\n    end\n    \n    M --&gt; A\n    N --&gt; B\n    \n    D --&gt; A\n    D --&gt; B\n    \n    A --&gt; C[Enriched Result]\n    B --&gt; C\n\n    C --&gt; CC\n    C --&gt; MG\n\n    C --&gt; P1\n\n    CC --&gt; K1\n    MG --&gt; K1\n\n    CC --&gt; K2\n    MG --&gt; K2\n\n    CC --&gt; P1\n    C --&gt; P2\n\n    MG --&gt; I\n\n\n\n\n\n\n\nThe functions from EnrichGT are starting with “egt_” or “database_”.\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "EnrichGT: all-in-one enrichment analysis"
    ]
  },
  {
    "objectID": "acknowledgement.html",
    "href": "acknowledgement.html",
    "title": "Acknowledgement",
    "section": "",
    "text": "This package is inspired by famous clusterProfiler. But since 0.5 version, the major enrichment functions of EnrichGT have replaced by the self-implemented functions, which provides a much light-weight experience. But without clusterProfiler, I won’t try to write this package.\n\n\n\n\n\n\nIf also using clusterProfiler ?\n\n\n\nPlease cite:\nT Wu#, E Hu#, S Xu, M Chen, P Guo, Z Dai, T Feng, L Zhou, W Tang, L Zhan, X Fu, S Liu, X Bo*, G Yu*. clusterProfiler 4.0: A universal enrichment tool for interpreting omics data. The Innovation. 2021, 2(3):100141. doi: 10.1016/j.xinn.2021.100141\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "re_enrichment.html",
    "href": "re_enrichment.html",
    "title": "Second enrichment of enriched Results",
    "section": "",
    "text": "The enriched result is too messy? Clean up it!\nEnrichGT generates insightful results by simply constructing a term frequency matrix of genes enriched in pathways and performing clustering. While the results may not be statistically optimal, they offer significant interpretive insights.\nPrint ?egt_recluster_analysis for further help. But of note, you can adjust ClusterNum (Cluster the enrichment into N clusters) and nTop (Show how many top items in GT table) for a better result (the default is not all the best for your data).\n\n\n\n\n\n\nWhy the re-enrichment is necessary?\n\n\n\n\n\n\n\nGene enrichment analysis can often be misleading due to the redundancy within gene set databases and the limitations of most enrichment tools. Many tools, by default, only display a few top results and fail to filter out redundancy. This can result in both biological misinterpretation and valuable information being overlooked.\nFor instance, high expression of certain immune genes can cause many immune-related gene sets to appear overrepresented. However, a closer look often reveals that these gene sets are derived from the same group of genes, which might represent only a small fraction (less than 10%) of the differentially expressed genes (DEGs). What about the other 90%? Do they hold no biological significance?\n\n\n\nclusterProfiler is one of the most powerful tools in R for enrichment analysis. It’s designed with pathway redundancy in mind and includes the clusterProfiler::simplify function to address this issue. This method, based on GOSemSim for GO similarity evaluation, is scientifically robust and highly effective.\nHowever, there are some drawbacks:\n\nGOSemSim is not fast, particularly when dealing with large or complex gene sets.\nIt doesn’t support databases like KEGG or Reactome.\n\nUsing GOSemSim to measure the semantic similarity between pathways is, theoretically, the best way to tackle redundancy. However, in practical cases—especially in experimental bioinformatics validation—researchers are more focused on the genes behind these pathways rather than the pathways themselves.\n\n\n\nAlthough clustering pathways based on gene overlap has received some criticism, it remains a viable approach in many situations. For this reason, I developed BioThemeFinder a few years ago to solve this problem. However, the tool is so awful (I am poor in coding…)\nToday, two excellent alternatives exist:\n\nsimplifyEnrichment: This package is more scientifically rigorous (based on semantic similarity) and creates beautiful visualizations. It also doesn’t support databases like KEGG or Reactome.\naPEAR: A simpler and faster tool that better aligns with practical needs, making it my preferred choice.\n\nHowever, both of these tools have a common limitation: their visualizations are optimized for publication purposes rather than for exploratory research. I often find myself exporting CSV files or struggling with RStudio’s preview pane to fully explore enrichment tables. This inspired me to develop a more efficient solution. Also, they are slow.\n\n\n\nThe main purpose of developing this package is to provide a lightweight and practical solution to the problems mentioned above. Specifically, this package aims to:\nCluster enrichment results based on hit genes or core enrichment from GSEA using term frequency analysis (from the output of the powerful clusterProfiler). This provides a clearer view of biological relevance by focusing on the genes that matter most.\n\n\n\n\n# From results generated before\nres &lt;- egt_enrichment_analysis(genes = DEGtable$Genes,\ndatabase = database_GO_BP(Org.Hs.eg.db))\n\nre_enrich &lt;- egt_recluster_analysis(\n  res,\n  ClusterNum = 10,\n  P.adj = 0.05,\n  force = F,\n  nTop = 10,\n  method = \"ward.D2\"\n)\nYou can see the structure of re_enrich object above. The re_enrich object is an S4 EnrichGT_obj object. The first slot is the result table (a data.frame), and the second slot contains gt table.\n\nstr(re_enrich,max.level = 2)\n\nFormal class 'EnrichGT_obj' [package \"EnrichGT\"] with 10 slots\n  ..@ enriched_result     : tibble [67 × 7] (S3: tbl_df/tbl/data.frame)\n  ..@ tinytable_obj       :Formal class 'tinytable' [package \"tinytable\"] with 33 slots\n  ..@ gene_modules        :List of 10\n  ..@ pathway_clusters    :List of 10\n  ..@ document_term_matrix:Formal class 'dgCMatrix' [package \"Matrix\"] with 6 slots\n  ..@ clustering_tree     :List of 7\n  .. ..- attr(*, \"class\")= chr \"hclust\"\n  ..@ raw_enriched_result : tibble [2,979 × 9] (S3: tbl_df/tbl/data.frame)\n  ..@ fused               : logi FALSE\n  ..@ param               :List of 6\n  ..@ LLM_Annotation      :Formal class 'egt_llm' [package \"EnrichGT\"] with 2 slots\n\n\n\n\nYou can simple View(re_enrich@enriched_result) for the first slot.\n\nre_enrich@enriched_result # Get the re-enrichment result table\n\n# A tibble: 67 × 7\n   Description                          ID    Count Cluster   PCT    Padj geneID\n   &lt;chr&gt;                                &lt;chr&gt; &lt;int&gt; &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt; \n 1 synaptic transmission, glutamatergic GO:0…    19 Cluste…   4.2 8.10e-8 ATP1A…\n 2 regulation of synaptic transmission… GO:0…    16 Cluste…   3.5 8.10e-8 ATP1A…\n 3 modulation of chemical synaptic tra… GO:0…    39 Cluste…   8.5 8.10e-8 ACHE,…\n 4 regulation of trans-synaptic signal… GO:0…    39 Cluste…   8.5 8.10e-8 ACHE,…\n 5 synapse organization                 GO:0…    36 Cluste…   7.9 2.10e-6 ACHE,…\n 6 regulation of neuronal synaptic pla… GO:0…    12 Cluste…   2.6 4.20e-6 APOE,…\n 7 glutamate receptor signaling pathway GO:0…    11 Cluste…   2.4 5.20e-6 GRIA4…\n 8 ionotropic glutamate receptor signa… GO:0…     8 Cluste…   1.8 1.10e-5 GRIA4…\n 9 regulation of synaptic plasticity    GO:0…    20 Cluste…   4.4 4.50e-5 APOE,…\n10 regulation of postsynaptic membrane… GO:0…    16 Cluste…   3.5 8.5 e-5 GABRD…\n# ℹ 57 more rows\n\n\n\n\n\nEnrichGT offers more than data frames. Please see HTML reports (tinytable table) for further visualization.\n\n\n\nThe re-enriched object from EnrichGT supports the $ subset operator. You can use it to glance details inside each cluster. In morden IDE like Positron, type $, and then press the Tab key for auto-completion, as shown in the figure.\n\nBut when you are still using RStudio (which auto-complete function is poor than ARK LSP), you can use names to get the cluster names.\n\nnames(re_enrich)\n\n [1] \"Cluster_1\"  \"Cluster_10\" \"Cluster_2\"  \"Cluster_3\"  \"Cluster_4\" \n [6] \"Cluster_5\"  \"Cluster_6\"  \"Cluster_7\"  \"Cluster_8\"  \"Cluster_9\" \n\n\nIn this example, all results haven’t got any extra annotation. But EnrichGT supports Large language models (LLMs) based enrichment result annotations, you can refer to large language models integration of EnrichGT page for more details. After performed LLM annotations, this step will display more information and insights about enrichment results. If you feel typing full names is bored, you can use c1 or C1 and even \"1\" to access it.\nFor example:\n\nre_enrich$Cluster_1\n\n\n\n\n── Enrichment Result of Cluster_1 (Local Summary) ──────────────────────────────\n\n\n• This cluster contains synaptic transmission, glutamatergic, regulation of\nsynaptic transmission, glutamatergic, modulation of chemical synaptic\ntransmission, regulation of trans-synaptic signaling, synapse organization ...\n\n\n• Candidate genes includes ACHE, ADGRF1, APOE, ATP1A2, BCAN, CA2, CACNG5,\nCAMK2B, CDC20, CDH6, CNTN2, CTNNA2, DGKI, DLGAP1, DNER, DSCAM, ERC2, GABRD,\nGAP43, GFAP, GRIA4, GRID2, GRIK2, GRIK3, GRIN1, GRIN2A, GRIN2B, GRIN2D, GRM1,\nGRM5, GRM8, HCN1, HRAS, HTR3A, IGSF9, IL1RAPL2, INA, KIF1A, LHFPL4, LRFN2,\nMAP1B, MAPK8IP2, NLGN1, NMU, NRCAM, NRXN1, NTRK2, RAC3, RIMS3, SEZ6L2, SHISA9,\nSIX1, SLC6A1, SYNDIG1, TREM2, UNC13A, UNC13C, VGF, WNT5A (We will print all\ngenes. Please stroll to top to read)\n\n\n[1] \"cli-92167-17\"\n\n\n\nre_enrich$c3\n\n\n\n\n── Enrichment Result of Cluster_3 (Local Summary) ──────────────────────────────\n\n\n• This cluster contains locomotory behavior, startle response, neuron\nrecognition, cell recognition, gas transport ...\n\n\n• Candidate genes includes AKR1B1, ALK, ANKH, APLP1, APOE, ATP1A2, ATP8B3,\nBCAN, C4BPB, CA2, CAMK2B, CDC20, CIART, CNTN2, CNTNAP2, COL1A1, CRYAB, CTNNA2,\nDLX5, DPP4, DPYSL5, DSCAM, ENPP1, EPHA10, FOLR2, FOXD1, FOXS1, FSTL4, GAD1,\nGAP43, GPR37, GPX1, GRID2, GRIN2A, GRIN2D, GRM1, GRM5, HBA1, HBA2, HBB, HCN1,\nHCN2, HMOX1, IGSF9, KIAA1755, KIF5C, MAG, MAP1B, MB, MEGF10, NKX6-1, NLGN1,\nNQO1, NRCAM, NRXN1, NTRK2, OPCML, PPP1R1B, RAC3, RASD2, RYR1, SDC1, SEMA5B,\nSEZ6L2, SLC5A5, SLC6A1, SLC6A3, SOX8, SRD5A1, STAC2, STRA6, TDRD5, TFCP2L1,\nTNNT1, TREM2, TRPM2, UCHL1, UNC13A, UNC13C, VGF, WNT5A, ZAN, ZIC1 (We will\nprint all genes. Please stroll to top to read)\n\n\n[1] \"cli-92167-22\"\n\n\n\nre_enrich$\"5\"\n\n\n\n\n── Enrichment Result of Cluster_5 (Local Summary) ──────────────────────────────\n\n\n• This cluster contains ear development, sensory organ morphogenesis, ear\nmorphogenesis, cochlea development, muscle tissue development ...\n\n\n• Candidate genes includes AGT, ALPK2, BARX2, CELSR3, CENPF, COL11A1, CTHRC1,\nDLX5, DNER, DSCAM, EYA2, FJX1, FOXC2, GPX1, GSDME, HCN1, HEY2, JAG1, KCNK2,\nMEGF10, MSX1, MYLK2, MYO18B, MYO3B, NOX4, NTRK2, RYR1, SAPCD2, SDC1, SFRP2,\nSGCZ, SIX1, SIX2, SOX8, STRA6, TBX15, TBX18, TFAP2A, TNNT1, TP73, TWIST1,\nUCHL1, WFIKKN1, WNT4, WNT5A, ZIC1 (We will print all genes. Please stroll to\ntop to read)\n\n\n[1] \"cli-92167-27\"\n\n\nFurther more, you can can use @ to get objects in S4. Like result@gene_modules returns genes in cluster.\n\n\n\n\n\n\nHow to get objects inside the S4 object?\n\n\n\nYou can use @, for example, x &lt;- re_enrich@enriched_result returns a result table and x &lt;- re_enrich@tinytable_obj returns a gt object.",
    "crumbs": [
      "Home",
      "Second enrichment of enriched Results"
    ]
  },
  {
    "objectID": "re_enrichment.html#access-re-enriched-data-table",
    "href": "re_enrichment.html#access-re-enriched-data-table",
    "title": "Second enrichment of enriched Results",
    "section": "",
    "text": "You can simple View(re_enrich@enriched_result) for the first slot.\n\nre_enrich@enriched_result # Get the re-enrichment result table\n\n# A tibble: 67 × 7\n   Description                          ID    Count Cluster   PCT    Padj geneID\n   &lt;chr&gt;                                &lt;chr&gt; &lt;int&gt; &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt; \n 1 synaptic transmission, glutamatergic GO:0…    19 Cluste…   4.2 8.10e-8 ATP1A…\n 2 regulation of synaptic transmission… GO:0…    16 Cluste…   3.5 8.10e-8 ATP1A…\n 3 modulation of chemical synaptic tra… GO:0…    39 Cluste…   8.5 8.10e-8 ACHE,…\n 4 regulation of trans-synaptic signal… GO:0…    39 Cluste…   8.5 8.10e-8 ACHE,…\n 5 synapse organization                 GO:0…    36 Cluste…   7.9 2.10e-6 ACHE,…\n 6 regulation of neuronal synaptic pla… GO:0…    12 Cluste…   2.6 4.20e-6 APOE,…\n 7 glutamate receptor signaling pathway GO:0…    11 Cluste…   2.4 5.20e-6 GRIA4…\n 8 ionotropic glutamate receptor signa… GO:0…     8 Cluste…   1.8 1.10e-5 GRIA4…\n 9 regulation of synaptic plasticity    GO:0…    20 Cluste…   4.4 4.50e-5 APOE,…\n10 regulation of postsynaptic membrane… GO:0…    16 Cluste…   3.5 8.5 e-5 GABRD…\n# ℹ 57 more rows",
    "crumbs": [
      "Home",
      "Second enrichment of enriched Results"
    ]
  },
  {
    "objectID": "re_enrichment.html#access-re-enriched-html-report",
    "href": "re_enrichment.html#access-re-enriched-html-report",
    "title": "Second enrichment of enriched Results",
    "section": "",
    "text": "EnrichGT offers more than data frames. Please see HTML reports (tinytable table) for further visualization.",
    "crumbs": [
      "Home",
      "Second enrichment of enriched Results"
    ]
  },
  {
    "objectID": "re_enrichment.html#glance-details-of-each-module",
    "href": "re_enrichment.html#glance-details-of-each-module",
    "title": "Second enrichment of enriched Results",
    "section": "",
    "text": "The re-enriched object from EnrichGT supports the $ subset operator. You can use it to glance details inside each cluster. In morden IDE like Positron, type $, and then press the Tab key for auto-completion, as shown in the figure.\n\nBut when you are still using RStudio (which auto-complete function is poor than ARK LSP), you can use names to get the cluster names.\n\nnames(re_enrich)\n\n [1] \"Cluster_1\"  \"Cluster_10\" \"Cluster_2\"  \"Cluster_3\"  \"Cluster_4\" \n [6] \"Cluster_5\"  \"Cluster_6\"  \"Cluster_7\"  \"Cluster_8\"  \"Cluster_9\" \n\n\nIn this example, all results haven’t got any extra annotation. But EnrichGT supports Large language models (LLMs) based enrichment result annotations, you can refer to large language models integration of EnrichGT page for more details. After performed LLM annotations, this step will display more information and insights about enrichment results. If you feel typing full names is bored, you can use c1 or C1 and even \"1\" to access it.\nFor example:\n\nre_enrich$Cluster_1\n\n\n\n\n── Enrichment Result of Cluster_1 (Local Summary) ──────────────────────────────\n\n\n• This cluster contains synaptic transmission, glutamatergic, regulation of\nsynaptic transmission, glutamatergic, modulation of chemical synaptic\ntransmission, regulation of trans-synaptic signaling, synapse organization ...\n\n\n• Candidate genes includes ACHE, ADGRF1, APOE, ATP1A2, BCAN, CA2, CACNG5,\nCAMK2B, CDC20, CDH6, CNTN2, CTNNA2, DGKI, DLGAP1, DNER, DSCAM, ERC2, GABRD,\nGAP43, GFAP, GRIA4, GRID2, GRIK2, GRIK3, GRIN1, GRIN2A, GRIN2B, GRIN2D, GRM1,\nGRM5, GRM8, HCN1, HRAS, HTR3A, IGSF9, IL1RAPL2, INA, KIF1A, LHFPL4, LRFN2,\nMAP1B, MAPK8IP2, NLGN1, NMU, NRCAM, NRXN1, NTRK2, RAC3, RIMS3, SEZ6L2, SHISA9,\nSIX1, SLC6A1, SYNDIG1, TREM2, UNC13A, UNC13C, VGF, WNT5A (We will print all\ngenes. Please stroll to top to read)\n\n\n[1] \"cli-92167-17\"\n\n\n\nre_enrich$c3\n\n\n\n\n── Enrichment Result of Cluster_3 (Local Summary) ──────────────────────────────\n\n\n• This cluster contains locomotory behavior, startle response, neuron\nrecognition, cell recognition, gas transport ...\n\n\n• Candidate genes includes AKR1B1, ALK, ANKH, APLP1, APOE, ATP1A2, ATP8B3,\nBCAN, C4BPB, CA2, CAMK2B, CDC20, CIART, CNTN2, CNTNAP2, COL1A1, CRYAB, CTNNA2,\nDLX5, DPP4, DPYSL5, DSCAM, ENPP1, EPHA10, FOLR2, FOXD1, FOXS1, FSTL4, GAD1,\nGAP43, GPR37, GPX1, GRID2, GRIN2A, GRIN2D, GRM1, GRM5, HBA1, HBA2, HBB, HCN1,\nHCN2, HMOX1, IGSF9, KIAA1755, KIF5C, MAG, MAP1B, MB, MEGF10, NKX6-1, NLGN1,\nNQO1, NRCAM, NRXN1, NTRK2, OPCML, PPP1R1B, RAC3, RASD2, RYR1, SDC1, SEMA5B,\nSEZ6L2, SLC5A5, SLC6A1, SLC6A3, SOX8, SRD5A1, STAC2, STRA6, TDRD5, TFCP2L1,\nTNNT1, TREM2, TRPM2, UCHL1, UNC13A, UNC13C, VGF, WNT5A, ZAN, ZIC1 (We will\nprint all genes. Please stroll to top to read)\n\n\n[1] \"cli-92167-22\"\n\n\n\nre_enrich$\"5\"\n\n\n\n\n── Enrichment Result of Cluster_5 (Local Summary) ──────────────────────────────\n\n\n• This cluster contains ear development, sensory organ morphogenesis, ear\nmorphogenesis, cochlea development, muscle tissue development ...\n\n\n• Candidate genes includes AGT, ALPK2, BARX2, CELSR3, CENPF, COL11A1, CTHRC1,\nDLX5, DNER, DSCAM, EYA2, FJX1, FOXC2, GPX1, GSDME, HCN1, HEY2, JAG1, KCNK2,\nMEGF10, MSX1, MYLK2, MYO18B, MYO3B, NOX4, NTRK2, RYR1, SAPCD2, SDC1, SFRP2,\nSGCZ, SIX1, SIX2, SOX8, STRA6, TBX15, TBX18, TFAP2A, TNNT1, TP73, TWIST1,\nUCHL1, WFIKKN1, WNT4, WNT5A, ZIC1 (We will print all genes. Please stroll to\ntop to read)\n\n\n[1] \"cli-92167-27\"\n\n\nFurther more, you can can use @ to get objects in S4. Like result@gene_modules returns genes in cluster.\n\n\n\n\n\n\nHow to get objects inside the S4 object?\n\n\n\nYou can use @, for example, x &lt;- re_enrich@enriched_result returns a result table and x &lt;- re_enrich@tinytable_obj returns a gt object.",
    "crumbs": [
      "Home",
      "Second enrichment of enriched Results"
    ]
  },
  {
    "objectID": "database.html",
    "href": "database.html",
    "title": "Select your databases for enrichment or annotation",
    "section": "",
    "text": "How to specify species?\n\n\n\nEnrichGT use AnnotationDbi for fetching most of databases and gene annotations. you can use org.Hs.eg.db for human and org.Mm.eg.db for mouse. For others, please search in Google or refer to BioConductor.\nBut for non-AnnotationDbi source database, you do not need to provide this, like database_CollecTRI_human() return database about human only.\n\n\n\n\nYou should add argument OrgDB for fetching them.\nExample:\ndatabase_GO_BP(OrgDB = org.Hs.eg.db)\n\n\nBP stands for biological process, CC stands for cellular component and MF stands for molecular functions. The ALL will combined the above three sub-databases.\ndatabase_GO_BP(), database_GO_CC(), database_GO_MF(), database_GO_ALL()\n\n\n\nReactome is an open source pathway database.\ndatabase_Reactome()\n\n\n\nKEGG is a commercialized database. So EnrichGT can’t pre-cache them locally. You can use database_KEGG to fetch KEGG database pathways and modules.\nThis function requires two species-related argument. You may familiar to the OrgDB argument as they will be used to convert ENTREZ IDs to symbols like before. Another argument is the kegg_organism. It determines which species data from KEGG will be fetch. For human, it would be hsa(in default); For mouse, it would be mmu. If you wants other species, execute database_KEGG_show_organism() for details.\nYou can switch fetching KEGG pathways or modules by argument kegg_modules. If TRUE, returns KEGG module; If FALSE returns KEGG pathways. In default, this is setted to FALSE to get mouse commonly used KEGG pathways.\nIf you set local_cache = T, EnrichGT will cache a copy in local working folder. It will be saved as a .enrichgt_cache file in working dictionary. The .enrichgt_cache is just a .rds file, feel free to read it using readRDS().\nkeggdf &lt;- database_KEGG(kegg_organism=\"hsa\",OrgDB = org.Hs.eg.db,kegg_modules=F,local_cache=F)\n\n\n\nWikiPathway database provides pre-built GMT files (https://data.wikipathways.org/current/gmt/). In default they are recorded as ENTREZ IDs, so you need to provide proper species database (e.g. org.Hs.eg.db for human), to database_from_gmt function and EnrichGT will automatically convert ENTREZ IDs to gene symbols for enrichment analysis.\ndownload.file(\"https://data.wikipathways.org/current/gmt/wikipathways-20241210-gmt-Homo_sapiens.gmt\",destfile = \"WikiPWS_human.gmt\")\nWikiPWsDB &lt;- database_from_gmt(\"WikiPWS_human.gmt\",OrgDB=org.Hs.eg.db)\nres &lt;- egt_enrichment_analysis(genes = DEGtable$Genes,\ndatabase = WikiPWsDB)\n\n\n\nFor pathway activity infer, database_progeny_human() and database_progeny_mouse()\n\n\n\nFor Transcript Factors infer, database_CollecTRI_human() and database_CollecTRI_mouse()\n\n\n\n\nEnrichGT supports reading GMT files, You can obtain GMT files from MsigDB.\ndatabase_from_gmt(\"Path_to_your_Gmt_file.gmt\")\nIn default, database_from_gmt will try to convert the numeric ids to gene symbols (as they are usually the ENTREZ IDs, you can disable this by passing convert_2_symbols = F ).\n\n\n\nThe result of any database_*** functions are data.frames. So you can simple read any data tables and use them for any enrichment function.\nThe typical input should be:\n\n\n\nIDs\nTerm\nGenes\n\n\n\n\nID1\nBiological Pathway1\nGene1\n\n\nID1\nBiological Pathway1\nGene2\n\n\nID1\nBiological Pathway1\nGene3\n\n\nID2\nBiological Pathway2\nGene3\n\n\n…\n…\n…\n\n\n\nor\n\n\n\nTerm\nGenes\n\n\n\n\nBiological Pathway1\nGene1\n\n\nBiological Pathway1\nGene4\n\n\nBiological Pathway2\nGene7\n\n\n…\n…\n\n\n\nExample:\nlibrary(readr)\ndb &lt;- read_csv(\"you_gene_set.csv\")\nres &lt;- egt_enrichment_analysis(genes = DEGtable$Genes,\ndatabase = db)",
    "crumbs": [
      "Home",
      "Select your databases for enrichment or annotation"
    ]
  },
  {
    "objectID": "database.html#built-in-database-or-annotationdbi-database",
    "href": "database.html#built-in-database-or-annotationdbi-database",
    "title": "Select your databases for enrichment or annotation",
    "section": "",
    "text": "You should add argument OrgDB for fetching them.\nExample:\ndatabase_GO_BP(OrgDB = org.Hs.eg.db)\n\n\nBP stands for biological process, CC stands for cellular component and MF stands for molecular functions. The ALL will combined the above three sub-databases.\ndatabase_GO_BP(), database_GO_CC(), database_GO_MF(), database_GO_ALL()\n\n\n\nReactome is an open source pathway database.\ndatabase_Reactome()\n\n\n\nKEGG is a commercialized database. So EnrichGT can’t pre-cache them locally. You can use database_KEGG to fetch KEGG database pathways and modules.\nThis function requires two species-related argument. You may familiar to the OrgDB argument as they will be used to convert ENTREZ IDs to symbols like before. Another argument is the kegg_organism. It determines which species data from KEGG will be fetch. For human, it would be hsa(in default); For mouse, it would be mmu. If you wants other species, execute database_KEGG_show_organism() for details.\nYou can switch fetching KEGG pathways or modules by argument kegg_modules. If TRUE, returns KEGG module; If FALSE returns KEGG pathways. In default, this is setted to FALSE to get mouse commonly used KEGG pathways.\nIf you set local_cache = T, EnrichGT will cache a copy in local working folder. It will be saved as a .enrichgt_cache file in working dictionary. The .enrichgt_cache is just a .rds file, feel free to read it using readRDS().\nkeggdf &lt;- database_KEGG(kegg_organism=\"hsa\",OrgDB = org.Hs.eg.db,kegg_modules=F,local_cache=F)\n\n\n\nWikiPathway database provides pre-built GMT files (https://data.wikipathways.org/current/gmt/). In default they are recorded as ENTREZ IDs, so you need to provide proper species database (e.g. org.Hs.eg.db for human), to database_from_gmt function and EnrichGT will automatically convert ENTREZ IDs to gene symbols for enrichment analysis.\ndownload.file(\"https://data.wikipathways.org/current/gmt/wikipathways-20241210-gmt-Homo_sapiens.gmt\",destfile = \"WikiPWS_human.gmt\")\nWikiPWsDB &lt;- database_from_gmt(\"WikiPWS_human.gmt\",OrgDB=org.Hs.eg.db)\nres &lt;- egt_enrichment_analysis(genes = DEGtable$Genes,\ndatabase = WikiPWsDB)\n\n\n\nFor pathway activity infer, database_progeny_human() and database_progeny_mouse()\n\n\n\nFor Transcript Factors infer, database_CollecTRI_human() and database_CollecTRI_mouse()",
    "crumbs": [
      "Home",
      "Select your databases for enrichment or annotation"
    ]
  },
  {
    "objectID": "database.html#read-addition-gene-sets-from-local-gmt-files",
    "href": "database.html#read-addition-gene-sets-from-local-gmt-files",
    "title": "Select your databases for enrichment or annotation",
    "section": "",
    "text": "EnrichGT supports reading GMT files, You can obtain GMT files from MsigDB.\ndatabase_from_gmt(\"Path_to_your_Gmt_file.gmt\")\nIn default, database_from_gmt will try to convert the numeric ids to gene symbols (as they are usually the ENTREZ IDs, you can disable this by passing convert_2_symbols = F ).",
    "crumbs": [
      "Home",
      "Select your databases for enrichment or annotation"
    ]
  },
  {
    "objectID": "database.html#read-addition-gene-sets-from-local-data-tables",
    "href": "database.html#read-addition-gene-sets-from-local-data-tables",
    "title": "Select your databases for enrichment or annotation",
    "section": "",
    "text": "The result of any database_*** functions are data.frames. So you can simple read any data tables and use them for any enrichment function.\nThe typical input should be:\n\n\n\nIDs\nTerm\nGenes\n\n\n\n\nID1\nBiological Pathway1\nGene1\n\n\nID1\nBiological Pathway1\nGene2\n\n\nID1\nBiological Pathway1\nGene3\n\n\nID2\nBiological Pathway2\nGene3\n\n\n…\n…\n…\n\n\n\nor\n\n\n\nTerm\nGenes\n\n\n\n\nBiological Pathway1\nGene1\n\n\nBiological Pathway1\nGene4\n\n\nBiological Pathway2\nGene7\n\n\n…\n…\n\n\n\nExample:\nlibrary(readr)\ndb &lt;- read_csv(\"you_gene_set.csv\")\nres &lt;- egt_enrichment_analysis(genes = DEGtable$Genes,\ndatabase = db)",
    "crumbs": [
      "Home",
      "Select your databases for enrichment or annotation"
    ]
  },
  {
    "objectID": "enrichment_core.html",
    "href": "enrichment_core.html",
    "title": "Core Enrichment Functions",
    "section": "",
    "text": "Basic enrichment analysis involves performing a batch “dictionary lookup” for a set of genes to determine their associations. The most commonly used method is over-representation analysis (ORA). If you also have information on weights, then Gene Set Enrichment Analysis (GSEA) is another classic choice.\n\n\nEnrichment of genes\nThis is a C++ accelerated ORA tool. The only things you need is your favourite gene symbols. If is all prepared, then load a database, run it!\n\n\n\n\n\n\nDifference from other tools\n\n\n\n\n\nCompared to the most popular clusterProfiler, the functions of EnrichGT differ slightly. This is mainly to accommodate wet lab researchers. First, most beginners are confused by the default input of clusterProfiler, which is “ENTREZ ID.” Most people familiar with biology are used to Gene Symbols, and even Ensembl IDs are not widely known, let alone a series of seemingly random numbers. Therefore, EnrichGT uses Gene Symbol as the default input, seamlessly integrating with most downstream results from various companies, making it more suitable for non-experts in the lab.\nSecond, clusterProfiler outputs an S4 object, which may be too complex for beginners (this is no joke); whereas EnrichGT outputs a simple table. The time of non-experts is precious, so I made these two adjustments. The only downside is that the GSEA peak plot is difficult to generate, but in reality, we focus more on NES and p-values, and in this case, bar plots are more convincing.\nFurthermore, The pre-processing step of the hypergeometric test in EnrichGT’s ORA function (which determines overlap) is accelerated using hash tables in C++, making it over five times faster than clusterProfiler::enricher(), which is a pure R implementation.\n\n\n\n\n\n\n\n\n\nBasic usage\n\n\n\n\n\nres &lt;- egt_enrichment_analysis(genes = DEGtable$Genes,\ndatabase = database_GO_BP(org.Hs.eg.db))\n\nres &lt;- egt_enrichment_analysis(genes = c(\"TP53\",\"CD169\",\"CD68\",\"CD163\",\n                                         \"You can add more genes\"),\ndatabase = database_Reactome(org.Hs.eg.db))\n\nres &lt;- egt_enrichment_analysis(genes = c(\"TP53\",\"CD169\",\"CD68\",\"CD163\",\n                                         \"You can add more genes\"),\ndatabase = database_from_gmt(\"MsigDB_Hallmark.gmt\"))\n\n\n\nNow, we load the necessary packages and example dataset, to provide you with an example.\n\nlibrary(dplyr)\nlibrary(tibble)\nlibrary(ggplot2)\nlibrary(org.Hs.eg.db)\nlibrary(gt)\nlibrary(EnrichGT)\nlibrary(readr)\nDEGexample &lt;- read_csv(\"./DEG.csv\")\nDEGexample_UpReg &lt;- DEGexample |&gt; dplyr::filter(pvalue&lt;0.05,log2FoldChange&gt;0.7)\n\n\n\n\n\n\n\nRemember to load AnnotationDbi object\n\n\n\nMost of errors are caused by this. Please load Like AnnotationDbi like org.Hs.eg.db before doing enrichment.\n\n\nThen we start ORA:\n\nora_result &lt;- egt_enrichment_analysis(genes = DEGexample_UpReg$...1,database = database_GO_BP(org.Hs.eg.db))\n\n✔ success loaded database, time used : 16.954647064209 sec.\n\n\n✔ Done ORA in 0.134052991867065 sec.\n\nora_result\n\n# A tibble: 2,979 × 9\n   ID       Description GeneRatio BgRatio   pvalue p.adjust  qvalue geneID Count\n   &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;int&gt;\n 1 GO:0035… synaptic t… 19/457    111/18… 2.06e-11  8.05e-8 8.41e-5 ATP1A…    19\n 2 GO:0051… regulation… 16/457    79/188… 5.74e-11  8.05e-8 8.41e-5 ATP1A…    16\n 3 GO:0050… modulation… 39/457    489/18… 7.26e-11  8.05e-8 8.41e-5 ACHE/…    39\n 4 GO:0099… regulation… 39/457    490/18… 7.71e-11  8.05e-8 8.41e-5 ACHE/…    39\n 5 GO:0050… synapse or… 36/457    483/18… 2.51e- 9  2.10e-6 1.11e-3 ACHE/…    36\n 6 GO:0048… regulation… 12/457    56/188… 7.50e- 9  4.18e-6 1.11e-3 APOE/…    12\n 7 GO:0007… mitotic sp… 11/457    46/188… 9.27e- 9  4.18e-6 1.11e-3 BIRC5…    11\n 8 GO:0071… mitotic sp… 11/457    46/188… 9.27e- 9  4.18e-6 1.11e-3 BIRC5…    11\n 9 GO:0071… spindle as… 11/457    46/188… 9.27e- 9  4.18e-6 1.11e-3 BIRC5…    11\n10 GO:0031… spindle ch… 11/457    47/188… 1.18e- 8  4.18e-6 1.11e-3 BIRC5…    11\n# ℹ 2,969 more rows\n\n\n\n\n\n\n\n\nHave many sources of genes?\n\n\n\n\nCase 1: many groups of genes:\n\nThis function also support many groups of genes, you can input a list.\n# For many groups of genes\nres &lt;- egt_enrichment_analysis(list(Macrophages=c(\"CD169\",\"CD68\",\"CD163\"),\nFibroblast=c(\"COL1A2\",\"COL1A3\"),\"You can add more groups\"),\n database = database_from_gmt(\"panglaoDB.gmt\"))\n\nCase 2: Differential expressed genes with different direction:\n\nIn above example, if we don’t filter out the up-regulated genes for ORA, but want to combine all DEGs without selecting them according to log2FC. How can we achieve that?\nFrom version 0.8, egt_enrichment_analysis() supports input genes using genes_with_weights() function. For example:\nDEGexample &lt;- read_csv(\"~/Documents/4Fun/EGTFun/DEG.csv\")\nDEGexample2 &lt;- DEGexample |&gt; dplyr::filter(pvalue&lt;0.05)\nora_result &lt;- egt_enrichment_analysis(genes = genes_with_weights(DEGexample2$...1,DEGexample2$log2FoldChange), database = database_GO_BP(org.Hs.eg.db))\nThen, the output will automatically consider the proportion of up-regulated genes and down-regulated genes, and finally showing them in any results EnrichGT generated, like data.frames, gt table or dot plots.\n\n\nFor visualize, see ploting ORA results for details. You can use egt_plot_results() to view the enriched result. And you can see re-enrichment and FUSING guides for more further analysis.\n\n\nEnrichment of weighted genes (GSEA)\nGenes with specific weights (e.g. the log2FC) can use GSEA method. It should input a pre-ranked geneset. This use C++ accelerated fgsea::fgsea() as backend, so it is also very fast.\nThis provides a quick display of NES, p-values, and leading-edge genes. This function uses the same backend as the industry-standard clusterProfiler (it is also implemented using the fgsea package). However, EnrichGT does not delve as deeply as clusterProfiler and lacks advanced visualization capabilities. While it may not be sufficient for bioinformatics experts, the current implementation is adequate for wet-lab researchers. If comprehensive analysis is required, consider using clusterProfiler. However, if you only need an overview and reclustering, EnrichGT may be enough.\n\n\n\n\n\n\nHow to build pre-ranked gene set?\n\n\n\ngenes_with_weights(genes,weights) function is used to build the pre-ranked gene set for GSEA analysis.\n\n\nUsually, GSEA use the log2FoldChange from DEG analysis as the weights of genes. This is an example:\n\nresGSEA &lt;- egt_gsea_analysis(genes = \n                           genes_with_weights(genes = DEGexample$...1, \n                                              weights = DEGexample$log2FoldChange),\n                         database = database_GO_BP(org.Hs.eg.db)\n                         )\n\n✔ Use cached database: GO_BP_org.Hs.eg.db\n\n\nWarning in preparePathwaysAndStats(pathways, stats, minSize, maxSize, gseaParam, : There are ties in the preranked stats (0.02% of the list).\nThe order of those tied genes will be arbitrary, which may produce unexpected results.\n\n\n✔ Sucessful GSEA, time last 8.36612606048584 secs.\n\nresGSEA\n\n# A tibble: 3,850 × 7\n   ID         Description              ES   NES  pvalue p.adjust core_enrichment\n   &lt;chr&gt;      &lt;chr&gt;                 &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;          \n 1 GO:0060078 regulation of postsy… 0.564  1.94 4.60e-6 0.000188 GRIK3/HCN1/GRM…\n 2 GO:0007216 G protein-coupled gl… 0.840  1.92 1.31e-4 0.00295  GRIK3/GRM1/GRM…\n 3 GO:0050907 detection of chemica… 0.767  1.92 1.55e-4 0.00342  OR51E1/CST1/OR…\n 4 GO:0035249 synaptic transmissio… 0.560  1.92 1.87e-5 0.000621 GRIK3/UNC13C/G…\n 5 GO:0050906 detection of stimulu… 0.594  1.90 4.98e-5 0.00136  OR51E1/CST1/OR…\n 6 GO:0061982 meiosis I cell cycle… 0.553  1.87 1.09e-4 0.00259  SPATA22/KASH5/…\n 7 GO:0051966 regulation of synapt… 0.581  1.87 7.66e-5 0.00191  GRIK3/GRM1/CAC…\n 8 GO:0031577 spindle checkpoint s… 0.627  1.86 5.57e-4 0.00905  SPC24/BIRC5/PL…\n 9 GO:0007628 adult walking behavi… 0.717  1.86 4.16e-4 0.00715  ZIC1/CNTN2/CAC…\n10 GO:0007094 mitotic spindle asse… 0.628  1.85 6.81e-4 0.0103   SPC24/BIRC5/PL…\n# ℹ 3,840 more rows\n\n\nOther kind of weights, like the loading from PCA or NMF, or the importance of random forest, can be also used.\nresExample &lt;- egt_gsea_analysis(genes = genes_with_weights(genes = PCA_res$genes,\n                                                    weights =PCA_res$PC1_loading),\n                         database = database_from_gmt(\"MsigDB_Hallmark.gmt\")\n                         )\nGSEA results also support re-enrichment. Brifely, GSEA now supports two kinds of figures. For visualize, see plotting page for further guides. The most frequently used is the bar plot (by function egt_plot_results), showing p-values and NES. And we provides two ranking figures (single figure / viewing by table) by warping plotting functions from fgsea - the function is called egt_plot_gsea().\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Core Enrichment Functions"
    ]
  },
  {
    "objectID": "pkgfuns.html",
    "href": "pkgfuns.html",
    "title": "Package Functions Help",
    "section": "",
    "text": "Type: Package\nPackage: EnrichGT\nTitle: EnrichGT - all in one enrichment analysis solution\nVersion: 1.0.3\nAuthor: Zhiming Ye\nMaintainer: Zhiming Ye &lt;garnetcrow@hotmail.com&gt;\nDescription: Do biological enrichment analysis and parsing and clustering\n    enrichment result to insightful results in just ONE package\nLicense: GPL-V3\nURL: https://zhimingye.github.io/EnrichGT/\nDepends: \n    R (&gt;= 2.10)\nImports: \n    AnnotationDbi,\n    BiocManager,\n    cli,\n    dplyr,\n    ellmer,\n    fgsea,\n    fontawesome,\n    forcats,\n    ggplot2,\n    glue,\n    GO.db,\n    grDevices,\n    gt,\n    Matrix,\n    methods,\n    parallel,\n    proxy,\n    qvalue,\n    RColorBrewer,\n    Rcpp,\n    reactome.db,\n    rlang,\n    scales,\n    stats,\n    stringr,\n    text2vec,\n    tibble,\n    utils,\n    xfun\nSuggests: \n    devtools,\n    readr,\n    testthat (&gt;= 3.0.0),\n    tidyverse\nLinkingTo: \n    Rcpp\nConfig/testthat/edition: 3\nEncoding: UTF-8\nLazyData: true\nRoxygenNote: 7.3.2"
  },
  {
    "objectID": "pkgfuns.html#description-1",
    "href": "pkgfuns.html#description-1",
    "title": "Package Functions Help",
    "section": "Description",
    "text": "Description\nConvert gene annotations from any keys to any keys"
  },
  {
    "objectID": "pkgfuns.html#usage",
    "href": "pkgfuns.html#usage",
    "title": "Package Functions Help",
    "section": "Usage",
    "text": "Usage\nconvert_annotations_genes(genes, from_what, to_what, OrgDB)"
  },
  {
    "objectID": "pkgfuns.html#arguments",
    "href": "pkgfuns.html#arguments",
    "title": "Package Functions Help",
    "section": "Arguments",
    "text": "Arguments\n\ngenes: gene vector\nfrom_what: input type (like “SYMBOL”,“ENTREZID”,“ENSEMBL”,“GENENAME”,…), keys should be supported by AnnotationDbi. Search for the help page of AnnotationDbi for further help.\nto_what: output type (like “SYMBOL”,“ENTREZID”,“ENSEMBL”,“GENENAME”,…), keys should be supported by AnnotationDbi. Search for the help page of AnnotationDbi for further help. Can be multiple items E.g. c(\"ENTREZID\",\"ENSEMBL\",\"GENENAME\")\nOrgDB: human = org.Hs.eg.db, mouse = org.Mm.eg.db, search BioConductor website for further help"
  },
  {
    "objectID": "pkgfuns.html#value",
    "href": "pkgfuns.html#value",
    "title": "Package Functions Help",
    "section": "Value",
    "text": "Value\na data.frame"
  },
  {
    "objectID": "pkgfuns.html#description-2",
    "href": "pkgfuns.html#description-2",
    "title": "Package Functions Help",
    "section": "Description",
    "text": "Description\nReads gene set files in GMT format (e.g., from MSigDB or WikiPathways) and converts them to a data frame suitable for enrichment analysis. Can optionally convert ENTREZ IDs to gene symbols."
  },
  {
    "objectID": "pkgfuns.html#usage-1",
    "href": "pkgfuns.html#usage-1",
    "title": "Package Functions Help",
    "section": "Usage",
    "text": "Usage\ndatabase_from_gmt(gmtfile, OrgDB = NULL, convert_2_symbols = T)"
  },
  {
    "objectID": "pkgfuns.html#arguments-1",
    "href": "pkgfuns.html#arguments-1",
    "title": "Package Functions Help",
    "section": "Arguments",
    "text": "Arguments\n\ngmtfile: Path to GMT format file\nOrgDB: Annotation database for ID conversion (e.g., org.Hs.eg.db for human). Required if convert_2_symbols=TRUE.\nconvert_2_symbols: Logical indicating whether to convert ENTREZ IDs to gene symbols. Default is TRUE."
  },
  {
    "objectID": "pkgfuns.html#author",
    "href": "pkgfuns.html#author",
    "title": "Package Functions Help",
    "section": "Author",
    "text": "Author\nOriginal GMT parser by Guangchuang Yu (https://github.com/YuLab-SMU/gson). Cache system and enhancements by Zhiming Ye."
  },
  {
    "objectID": "pkgfuns.html#value-1",
    "href": "pkgfuns.html#value-1",
    "title": "Package Functions Help",
    "section": "Value",
    "text": "Value\nA data frame with columns:\n\nterm: Gene set name\ngene: Gene identifiers (symbols or ENTREZ IDs)\n\nIf input has 3 columns, includes an additional ID column."
  },
  {
    "objectID": "pkgfuns.html#examples",
    "href": "pkgfuns.html#examples",
    "title": "Package Functions Help",
    "section": "Examples",
    "text": "Examples\n# Read MSigDB hallmark gene sets\ngmt_file &lt;- system.file(\"extdata\", \"h.all.v7.4.symbols.gmt\", package = \"EnrichGT\")\ngene_sets &lt;- database_from_gmt(gmt_file)\n\n# Read WikiPathways with ENTREZ to symbol conversion  \ngmt_file &lt;- \"wikipathways-20220310-gmt-Homo_sapiens.gmt\"\ngene_sets &lt;- database_from_gmt(gmt_file, OrgDB = org.Hs.eg.db)"
  },
  {
    "objectID": "pkgfuns.html#description-3",
    "href": "pkgfuns.html#description-3",
    "title": "Package Functions Help",
    "section": "Description",
    "text": "Description\nSee ?egt_enrichment_analysis()"
  },
  {
    "objectID": "pkgfuns.html#usage-2",
    "href": "pkgfuns.html#usage-2",
    "title": "Package Functions Help",
    "section": "Usage",
    "text": "Usage\negt_compare_groups(\n  obj.test,\n  obj.ctrl,\n  name.test = NULL,\n  name.ctrl = NULL,\n  ClusterNum = 15,\n  P.adj = 0.05,\n  force = F,\n  nTop = 10,\n  method = \"ward.D2\",\n  ...\n)"
  },
  {
    "objectID": "pkgfuns.html#arguments-2",
    "href": "pkgfuns.html#arguments-2",
    "title": "Package Functions Help",
    "section": "Arguments",
    "text": "Arguments\n\nobj.test: the enriched object from tested group. WARNING: obj.test and obj.ctrl should come from same database (e.g. GO Biological Process(GOBP)).\nobj.ctrl: the enriched object from control group. WARNING: obj.test and obj.ctrl should come from same database (e.g. GO Biological Process(GOBP)).\nname.test: optional, the name of the testing group. If is NULL, the object name of obj.test will be used.\nname.ctrl: optional, the name of the control group. If is NULL, the object name of obj.ctrl will be used.\nClusterNum: how many cluster will be clustered\nP.adj: p.adjust cut-off. To avoid slow visualization, you can make stricter p-cut off.\nforce: ignore all auto-self-checks, which is useful\nnTop: keep n top items according to p-adj in each cluster.\nmethod: the agglomeration method to be used. This should be (an unambiguous abbreviation of) one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n...: Others options."
  },
  {
    "objectID": "pkgfuns.html#details",
    "href": "pkgfuns.html#details",
    "title": "Package Functions Help",
    "section": "Details",
    "text": "Details\nExecute obj.test VS obj.ctrl tests, showing pathway overlaps (or differences) and meta-gene modules of test group and control group. Supports ORA and GSEA results (enriched object or data.frame). !WARNING!: obj.test and obj.ctrl should come from same database (e.g. GO Biological Process(GOBP))."
  },
  {
    "objectID": "pkgfuns.html#author-1",
    "href": "pkgfuns.html#author-1",
    "title": "Package Functions Help",
    "section": "Author",
    "text": "Author\nZhiming Ye"
  },
  {
    "objectID": "pkgfuns.html#value-2",
    "href": "pkgfuns.html#value-2",
    "title": "Package Functions Help",
    "section": "Value",
    "text": "Value\nList containing multiple EnrichGT_obj objects. The List contains objects with overlapped enriched terms, unique enrich terms."
  },
  {
    "objectID": "pkgfuns.html#description-4",
    "href": "pkgfuns.html#description-4",
    "title": "Package Functions Help",
    "section": "Description",
    "text": "Description\nORA compares the proportion of genes in your target list that belong to specific categories (pathways, GO terms etc.) against the expected proportion in a background set. This implementation uses hash tables for efficient gene counting and supports parallel processing for analyzing multiple gene lists."
  },
  {
    "objectID": "pkgfuns.html#usage-3",
    "href": "pkgfuns.html#usage-3",
    "title": "Package Functions Help",
    "section": "Usage",
    "text": "Usage\negt_enrichment_analysis(\n  genes,\n  database,\n  p_adj_methods = \"BH\",\n  p_val_cut_off = 0.5,\n  background_genes = NULL,\n  min_geneset_size = 10,\n  max_geneset_size = 500,\n  multi_cores = 0\n)"
  },
  {
    "objectID": "pkgfuns.html#arguments-3",
    "href": "pkgfuns.html#arguments-3",
    "title": "Package Functions Help",
    "section": "Arguments",
    "text": "Arguments\n\ngenes: Input genes, either:\nCharacter vector of gene IDs (e.g., c(\"TP53\",\"BRCA1\"))\nNamed numeric vector from genes_with_weights() (will split by expression direction)\nList of gene vectors for multiple comparisons (e.g., by cell type)\ndatabase: Gene set database, either:\nBuilt-in database from database_GO_BP(), database_KEGG() etc.\nCustom data frame with columns: (ID, Pathway_Name, Genes) or (Pathway_Name, Genes)\nGMT file loaded via database_from_gmt()\np_val_cut_off: Adjusted p-value cutoff (default 0.5)\nbackground_genes: Custom background genes (default: all genes in database)\nmin_geneset_size: Minimum genes per set (default 10)\nmax_geneset_size: Maximum genes per set (default 500)\nmulti_cores: (Please don’t use this since it has several known bugs) Number of cores for parallel processing (default 0 = serial)\np_adj_method: Multiple testing correction method (default “BH” for Benjamini-Hochberg)"
  },
  {
    "objectID": "pkgfuns.html#details-1",
    "href": "pkgfuns.html#details-1",
    "title": "Package Functions Help",
    "section": "Details",
    "text": "Details\nIdentifies enriched biological pathways or gene sets in a gene list using high-performance C++ implementation with parallel processing support."
  },
  {
    "objectID": "pkgfuns.html#author-2",
    "href": "pkgfuns.html#author-2",
    "title": "Package Functions Help",
    "section": "Author",
    "text": "Author\nZhiming Ye"
  },
  {
    "objectID": "pkgfuns.html#value-3",
    "href": "pkgfuns.html#value-3",
    "title": "Package Functions Help",
    "section": "Value",
    "text": "Value\nA data frame with columns:\n\nID: Gene set identifier\nDescription: Gene set name\nGeneRatio: Enriched genes / input genes\nBgRatio: Set genes / background genes\npvalue: Raw p-value\np.adjust: Adjusted p-value\ngeneID: Enriched genes\nCount: Number of enriched genes\n\nFor weighted input, additional columns show up/down regulated genes."
  },
  {
    "objectID": "pkgfuns.html#examples-1",
    "href": "pkgfuns.html#examples-1",
    "title": "Package Functions Help",
    "section": "Examples",
    "text": "Examples\n# Basic ORA with GO Biological Processes\ngenes &lt;- c(\"TP53\", \"BRCA1\", \"EGFR\", \"CDK2\")\nres &lt;- egt_enrichment_analysis(genes, database_GO_BP())\n\n# ORA with DEG results (split by direction)\ndeg_genes &lt;- genes_with_weights(DEG$gene, DEG$log2FC)\nres &lt;- egt_enrichment_analysis(deg_genes, database_KEGG())\n\n# Multi-group ORA with parallel processing\ngene_lists &lt;- list(\n  Macrophages = c(\"CD68\", \"CD163\", \"CD169\"),\n  Fibroblasts = c(\"COL1A1\", \"COL1A2\", \"ACTA2\")\n)\nres &lt;- egt_enrichment_analysis(gene_lists, database_Reactome(), multi_cores=0)"
  },
  {
    "objectID": "pkgfuns.html#description-5",
    "href": "pkgfuns.html#description-5",
    "title": "Package Functions Help",
    "section": "Description",
    "text": "Description\nGSEA analyzes whether predefined gene sets show statistically significant enrichment at the top or bottom of a ranked gene list. This implementation uses the fast fgsea algorithm from the fgsea package."
  },
  {
    "objectID": "pkgfuns.html#usage-4",
    "href": "pkgfuns.html#usage-4",
    "title": "Package Functions Help",
    "section": "Usage",
    "text": "Usage\negt_gsea_analysis(\n  genes,\n  database,\n  p_val_cut_off = 0.5,\n  min_geneset_size = 10,\n  max_geneset_size = 500,\n  gseaParam = 1\n)"
  },
  {
    "objectID": "pkgfuns.html#arguments-4",
    "href": "pkgfuns.html#arguments-4",
    "title": "Package Functions Help",
    "section": "Arguments",
    "text": "Arguments\n\ngenes: A named numeric vector of ranked genes where:\nNames are gene identifiers\nValues are ranking metric (e.g., log2 fold change, PCA loading)Must be sorted in descending order (use genes_with_weights() to prepare)\ndatabase: Gene set database, either:\nBuilt-in database from database_GO_BP(), database_KEGG() etc.\nCustom data frame with columns: (ID, Pathway_Name, Genes) or (Pathway_Name, Genes)\nGMT file loaded via database_from_gmt()\np_val_cut_off: Adjusted p-value cutoff (default 0.5)\nmin_geneset_size: Minimum genes per set (default 10)\nmax_geneset_size: Maximum genes per set (default 500)\ngseaParam: GSEA parameter controlling weight of ranking (default 1)\np_adj_method: Multiple testing correction method (default “BH” for Benjamini-Hochberg)"
  },
  {
    "objectID": "pkgfuns.html#details-2",
    "href": "pkgfuns.html#details-2",
    "title": "Package Functions Help",
    "section": "Details",
    "text": "Details\nIdentifies enriched biological pathways in a ranked gene list using the fgsea algorithm."
  },
  {
    "objectID": "pkgfuns.html#author-3",
    "href": "pkgfuns.html#author-3",
    "title": "Package Functions Help",
    "section": "Author",
    "text": "Author\nBased on fgsea package by Alexey Sergushichev et al."
  },
  {
    "objectID": "pkgfuns.html#value-4",
    "href": "pkgfuns.html#value-4",
    "title": "Package Functions Help",
    "section": "Value",
    "text": "Value\nA data frame with columns:\n\nID: Gene set identifier\nDescription: Gene set name\nES: Enrichment score\nNES: Normalized enrichment score\npvalue: Raw p-value\np.adjust: Adjusted p-value\ncore_enrichment: Leading edge genes"
  },
  {
    "objectID": "pkgfuns.html#examples-2",
    "href": "pkgfuns.html#examples-2",
    "title": "Package Functions Help",
    "section": "Examples",
    "text": "Examples\n# Using differential expression results\nranked_genes &lt;- genes_with_weights(DEG$gene, DEG$log2FC)\nres &lt;- egt_gsea_analysis(ranked_genes, database_GO_BP())\n\n# Using PCA loadings\nranked_genes &lt;- genes_with_weights(rownames(pca$rotation), pca$rotation[,1])\nres &lt;- egt_gsea_analysis(ranked_genes, database_KEGG())\n\n# Custom gene sets from GMT file\nranked_genes &lt;- genes_with_weights(genes, weights)\nres &lt;- egt_gsea_analysis(ranked_genes, database_from_gmt(\"pathways.gmt\"))"
  },
  {
    "objectID": "pkgfuns.html#description-6",
    "href": "pkgfuns.html#description-6",
    "title": "Package Functions Help",
    "section": "Description",
    "text": "Description\nOnly supports gene symbols. PROGENy is a comprehensive resource containing a curated collection of pathways and their target genes, with weights for each interaction. CollecTRI is a comprehensive resource containing a curated collection of TFs and their transcriptional targets compiled from 12 different resources. This collection provides an increased coverage of transcription factors and a superior performance in identifying perturbed TFs compared to our previous. If when doing re-enrichment, you select a high number of clusters, that may cause low gene number in each meta-gene module, and then can’t be infered sucessfully. So if result is empty, please increase the number of re-clustering when doing it."
  },
  {
    "objectID": "pkgfuns.html#usage-5",
    "href": "pkgfuns.html#usage-5",
    "title": "Package Functions Help",
    "section": "Usage",
    "text": "Usage\negt_infer_act(x, DB = \"collectri\", species = \"human\")"
  },
  {
    "objectID": "pkgfuns.html#arguments-5",
    "href": "pkgfuns.html#arguments-5",
    "title": "Package Functions Help",
    "section": "Arguments",
    "text": "Arguments\n\nx: an EnrichGT_obj object.\nDB: can be “progeny” (the Pathway activity database), or “collectri” (TF activity database)\nspecies: can be “human” or “mouse”"
  },
  {
    "objectID": "pkgfuns.html#author-4",
    "href": "pkgfuns.html#author-4",
    "title": "Package Functions Help",
    "section": "Author",
    "text": "Author\nZhiming Ye, Saez-Rodriguez Lab (The decoupleR package, https://saezlab.github.io/decoupleR/)"
  },
  {
    "objectID": "pkgfuns.html#value-5",
    "href": "pkgfuns.html#value-5",
    "title": "Package Functions Help",
    "section": "Value",
    "text": "Value\nan ORA result list"
  },
  {
    "objectID": "pkgfuns.html#description-7",
    "href": "pkgfuns.html#description-7",
    "title": "Package Functions Help",
    "section": "Description",
    "text": "Description\nThis function uses a Large Language Model (LLM) to generate summaries for pathway clusters and gene modules in an EnrichGT_obj object."
  },
  {
    "objectID": "pkgfuns.html#usage-6",
    "href": "pkgfuns.html#usage-6",
    "title": "Package Functions Help",
    "section": "Usage",
    "text": "Usage\negt_llm_summary(x, chat, lang = \"English\")"
  },
  {
    "objectID": "pkgfuns.html#arguments-6",
    "href": "pkgfuns.html#arguments-6",
    "title": "Package Functions Help",
    "section": "Arguments",
    "text": "Arguments\n\nx: An EnrichGT_obj object created by [egt_recluster_analysis](egt_recluster_analysis).\nchat: An LLM chat object created by the ellmer package.\nlang: Language pass to LLM. Can be English or Chinese."
  },
  {
    "objectID": "pkgfuns.html#note",
    "href": "pkgfuns.html#note",
    "title": "Package Functions Help",
    "section": "Note",
    "text": "Note\nIt is recommended not to add system prompts when creating the chat object. The function provides its own carefully crafted prompts for biological analysis."
  },
  {
    "objectID": "pkgfuns.html#references",
    "href": "pkgfuns.html#references",
    "title": "Package Functions Help",
    "section": "References",
    "text": "References\nFor more information about creating chat objects, see the ellmer package documentation."
  },
  {
    "objectID": "pkgfuns.html#seealso",
    "href": "pkgfuns.html#seealso",
    "title": "Package Functions Help",
    "section": "Seealso",
    "text": "Seealso\n[egt_recluster_analysis](egt_recluster_analysis) to create the input object."
  },
  {
    "objectID": "pkgfuns.html#value-6",
    "href": "pkgfuns.html#value-6",
    "title": "Package Functions Help",
    "section": "Value",
    "text": "Value\nReturns the input EnrichGT_obj object with added LLM annotations in the LLM_Annotation slot. The annotations include:\n\npathways: Summaries of pathway clusters\ngenes_and_title: Summaries of gene modules and their titles"
  },
  {
    "objectID": "pkgfuns.html#examples-3",
    "href": "pkgfuns.html#examples-3",
    "title": "Package Functions Help",
    "section": "Examples",
    "text": "Examples\n# Create LLM chat object\nchat &lt;- chat_deepseek(api_key = YOUR_API_KEY, model = \"deepseek-chat\", system_prompt = \"\")\n\n# Run enrichment analysis and get EnrichGT_obj\nre_enrichment_results &lt;- egt_recluster_analysis(...)\n\n# Get LLM summaries\nre_enrichment_results &lt;- egt_llm_summary(re_enrichment_results, chat)"
  },
  {
    "objectID": "pkgfuns.html#description-8",
    "href": "pkgfuns.html#description-8",
    "title": "Package Functions Help",
    "section": "Description",
    "text": "Description\nThis function creates graphical representations of Gene Set Enrichment Analysis (GSEA) results, including either a multi-panel GSEA table plot for multiple pathways or a single pathway enrichment plot. The visualization leverages the fgsea package’s plotting functions."
  },
  {
    "objectID": "pkgfuns.html#usage-7",
    "href": "pkgfuns.html#usage-7",
    "title": "Package Functions Help",
    "section": "Usage",
    "text": "Usage\negt_plot_gsea(resGSEA$Description[1],genes = genes_with_weights(genes = DEGexample$...1, weights = DEGexample$log2FoldChange),database = database_GO_BP(org.Hs.eg.db))\n\negt_plot_gsea(resGSEA[1:8,],genes = genes_with_weights(genes = DEGexample$...1, weights = DEGexample$log2FoldChange),database = database_GO_BP(org.Hs.eg.db))"
  },
  {
    "objectID": "pkgfuns.html#arguments-7",
    "href": "pkgfuns.html#arguments-7",
    "title": "Package Functions Help",
    "section": "Arguments",
    "text": "Arguments\n\nx: A GSEA result object. Can be either:\nA data frame containing GSEA results (requires columns: pvalue, p.adjust, Description)\nA character string specifying a single pathway name\ngenes: A named numeric vector from genes_with_weights(). These should match the gene identifiers used in the GSEA analysis.\ndatabase: A database data.frame, You can obtain it from database_xxx() functions. This should correspond to the database used in the original GSEA analysis."
  },
  {
    "objectID": "pkgfuns.html#author-5",
    "href": "pkgfuns.html#author-5",
    "title": "Package Functions Help",
    "section": "Author",
    "text": "Author\nZhiming Ye, warpped from fgsea"
  },
  {
    "objectID": "pkgfuns.html#value-7",
    "href": "pkgfuns.html#value-7",
    "title": "Package Functions Help",
    "section": "Value",
    "text": "Value\nA ggplot object:\n\nWhen x is a data frame: Returns a multi-panel plot showing normalized enrichment scores (NES), p-values, and leading edge plots for top pathways\nWhen x is a pathway name: Returns an enrichment plot showing the running enrichment score for the specified pathway"
  },
  {
    "objectID": "pkgfuns.html#description-9",
    "href": "pkgfuns.html#description-9",
    "title": "Package Functions Help",
    "section": "Description",
    "text": "Description\nThis plot is the most widely like enrichplot::dotplot()used method to visualize enriched terms. It shows the enrichment scores (e.g. p values) and gene ratio or NES as dot size and color / or bar height. Users can specify the number of terms using ntop or selected terms to color via the low.col and hi.col."
  },
  {
    "objectID": "pkgfuns.html#usage-8",
    "href": "pkgfuns.html#usage-8",
    "title": "Package Functions Help",
    "section": "Usage",
    "text": "Usage\negt_plot_results(\n  x,\n  ntop = NULL,\n  showIDs = F,\n  max_len_descript = 40,\n  keepAll = F,\n  ...,\n  P.adj = NULL\n)"
  },
  {
    "objectID": "pkgfuns.html#arguments-8",
    "href": "pkgfuns.html#arguments-8",
    "title": "Package Functions Help",
    "section": "Arguments",
    "text": "Arguments\n\nx: a data frame form enriched result like egt_enrichment_analysis() or egt_gsea_analysis(), or an re-clustered EnrichGT object\nntop: Show top N in each cluster. In default, for origin enriched result, showing top 15; for re-clustered object, showing top 5 in each cluster.\nshowIDs: bool, show pathway IDs or not. Default is FALSE\nmax_len_descript: the label format length, default as 40.\n...: Other param\nP.adj: If pass an origin data.frame from original enriched result, you can specify the P-adjust value cut off. If is null, default is 0.05. When passing EnrichGT_obj, this filter is previously done by egt_recluster_analysis.\nlow.col: the color for the lowest\nhi.col: the color for the highest"
  },
  {
    "objectID": "pkgfuns.html#author-6",
    "href": "pkgfuns.html#author-6",
    "title": "Package Functions Help",
    "section": "Author",
    "text": "Author\nZhiming Ye"
  },
  {
    "objectID": "pkgfuns.html#value-8",
    "href": "pkgfuns.html#value-8",
    "title": "Package Functions Help",
    "section": "Value",
    "text": "Value\na ggplot2 object"
  },
  {
    "objectID": "pkgfuns.html#description-10",
    "href": "pkgfuns.html#description-10",
    "title": "Package Functions Help",
    "section": "Description",
    "text": "Description\nPerforms hierarchical clustering on enrichment results (ORA or GSEA) based on gene-term associations to reduce redundancy and improve biological interpretation. The function helps identify coherent groups of related terms while preserving important but less significant findings."
  },
  {
    "objectID": "pkgfuns.html#usage-9",
    "href": "pkgfuns.html#usage-9",
    "title": "Package Functions Help",
    "section": "Usage",
    "text": "Usage\negt_recluster_analysis(\n  x,\n  ClusterNum = 10,\n  P.adj = 0.05,\n  force = F,\n  nTop = 10,\n  method = \"ward.D2\",\n  ...\n)"
  },
  {
    "objectID": "pkgfuns.html#arguments-9",
    "href": "pkgfuns.html#arguments-9",
    "title": "Package Functions Help",
    "section": "Arguments",
    "text": "Arguments\n\nx: Enrichment result from EnrichGT or clusterProfiler. For multi-database results, provide a list.\nClusterNum: Number of clusters to create (default: 10).\nP.adj: Adjusted p-value cutoff (default: 0.05). Stricter values improve performance.\nforce: Logical to bypass validation checks (default: FALSE).\nnTop: Number of top terms to keep per cluster by p-value (default: 10).\nmethod: Hierarchical clustering method (default: “ward.D2”). One of: “ward.D”, “ward.D2”, “single”, “complete”, “average” (UPGMA), “mcquitty” (WPGMA), “median” (WPGMC), or “centroid” (UPGMC).\n...: Additional arguments passed to clustering functions."
  },
  {
    "objectID": "pkgfuns.html#details-3",
    "href": "pkgfuns.html#details-3",
    "title": "Package Functions Help",
    "section": "Details",
    "text": "Details\nInput requirements by analysis type: ORA results: Required columns: “ID”, “Description”, “GeneRatio”, “pvalue”, “p.adjust”, “geneID”, “Count” GSEA results:\nRequired columns: “ID”, “Description”, “NES”, “pvalue”, “p.adjust”, “core_enrichment” compareClusterResult: Either the compareClusterResult object or a data frame with: - All ORA columns listed above - Additional “Cluster” column Multi-database: Provide as a named list of the above result types"
  },
  {
    "objectID": "pkgfuns.html#author-7",
    "href": "pkgfuns.html#author-7",
    "title": "Package Functions Help",
    "section": "Author",
    "text": "Author\nZhiming Ye"
  },
  {
    "objectID": "pkgfuns.html#value-9",
    "href": "pkgfuns.html#value-9",
    "title": "Package Functions Help",
    "section": "Value",
    "text": "Value\nAn EnrichGT_obj containing:\n\nenriched_result: Filtered results data frame\ngt_object: Formatted gt table object\ngene_modules: List of gene modules per cluster\npathway_clusters: Pathway names by cluster\nclustering_tree: hclust object for visualization\nraw_enriched_result: Unfiltered results table"
  },
  {
    "objectID": "pkgfuns.html#examples-4",
    "href": "pkgfuns.html#examples-4",
    "title": "Package Functions Help",
    "section": "Examples",
    "text": "Examples\n# ORA example\nres &lt;- egt_recluster_analysis(ora_result, ClusterNum=8)\nplot(res@clustering_tree)\n\n# GSEA example \ngsea_res &lt;- egt_recluster_analysis(gsea_result, method=\"average\")\ngtsave(gsea_res@gt_object, \"results.html\")"
  },
  {
    "objectID": "pkgfuns.html#description-11",
    "href": "pkgfuns.html#description-11",
    "title": "Package Functions Help",
    "section": "Description",
    "text": "Description\nTakes gene identifiers and corresponding weights (like log2 fold changes) and returns a ranked vector suitable for Gene Set Enrichment Analysis (GSEA)."
  },
  {
    "objectID": "pkgfuns.html#usage-10",
    "href": "pkgfuns.html#usage-10",
    "title": "Package Functions Help",
    "section": "Usage",
    "text": "Usage\ngenes_with_weights(genes, weights)"
  },
  {
    "objectID": "pkgfuns.html#arguments-10",
    "href": "pkgfuns.html#arguments-10",
    "title": "Package Functions Help",
    "section": "Arguments",
    "text": "Arguments\n\ngenes: Character vector of gene identifiers (e.g., gene symbols or ENTREZ IDs)\nweights: Numeric vector of weights for each gene (typically log2 fold changes)"
  },
  {
    "objectID": "pkgfuns.html#author-8",
    "href": "pkgfuns.html#author-8",
    "title": "Package Functions Help",
    "section": "Author",
    "text": "Author\nZhiming Ye"
  },
  {
    "objectID": "pkgfuns.html#value-10",
    "href": "pkgfuns.html#value-10",
    "title": "Package Functions Help",
    "section": "Value",
    "text": "Value\nA named numeric vector sorted in descending order by weight, where: - Names are gene identifiers\n- Values are the corresponding weights"
  },
  {
    "objectID": "pkgfuns.html#examples-5",
    "href": "pkgfuns.html#examples-5",
    "title": "Package Functions Help",
    "section": "Examples",
    "text": "Examples\n# Example using differential expression results  \ngenes &lt;- c(\"TP53\", \"BRCA1\", \"EGFR\")\nlog2fc &lt;- c(1.5, -2.1, 0.8) \nranked_genes &lt;- genes_with_weights(genes, log2fc)"
  },
  {
    "objectID": "pkgfuns.html#description-12",
    "href": "pkgfuns.html#description-12",
    "title": "Package Functions Help",
    "section": "Description",
    "text": "Description\nGet Gene Ontology (GO), Reactome, and other term-to-gene database, for enrichment analysis"
  },
  {
    "objectID": "pkgfuns.html#usage-11",
    "href": "pkgfuns.html#usage-11",
    "title": "Package Functions Help",
    "section": "Usage",
    "text": "Usage\ndatabase_GO_BP(OrgDB = org.Hs.eg.db)\n\ndatabase_GO_CC(OrgDB = org.Hs.eg.db)\n\ndatabase_GO_MF(OrgDB = org.Hs.eg.db)\n\ndatabase_GO_ALL(OrgDB = org.Hs.eg.db)\n\ndatabase_Reactome(OrgDB = org.Hs.eg.db)\n\ndatabase_progeny_human()\n\ndatabase_progeny_mouse()\n\ndatabase_CollecTRI_human()\n\ndatabase_CollecTRI_mouse()"
  },
  {
    "objectID": "pkgfuns.html#arguments-11",
    "href": "pkgfuns.html#arguments-11",
    "title": "Package Functions Help",
    "section": "Arguments",
    "text": "Arguments\n\nOrgDB: The AnnotationDbi database to fetch pathway data and convert gene IDs to gene symbols. For human it would be org.Hs.eg.db, for mouse it would be org.Mm.eg.db. In AnnotationDbi there are many species, please search AnnotationDbi for other species annotation database. GO and Reactome should add this, progeny and collectri do not."
  },
  {
    "objectID": "pkgfuns.html#author-9",
    "href": "pkgfuns.html#author-9",
    "title": "Package Functions Help",
    "section": "Author",
    "text": "Author\nZhiming Ye. Part of functions were inspired by clusterProfiler but with brand new implement."
  },
  {
    "objectID": "pkgfuns.html#value-11",
    "href": "pkgfuns.html#value-11",
    "title": "Package Functions Help",
    "section": "Value",
    "text": "Value\na data.frame with ID, terms and genes"
  },
  {
    "objectID": "pkgfuns.html#description-13",
    "href": "pkgfuns.html#description-13",
    "title": "Package Functions Help",
    "section": "Description",
    "text": "Description\nKEGG is a commercialized database. So EnrichGT can’t pre-cache them locally. You can use this function to fetch KEGG database pathways and modules."
  },
  {
    "objectID": "pkgfuns.html#usage-12",
    "href": "pkgfuns.html#usage-12",
    "title": "Package Functions Help",
    "section": "Usage",
    "text": "Usage\ndatabase_KEGG(kegg_organism=\"hsa\",OrgDB = org.Hs.eg.db,kegg_modules=F,local_cache=F)\n\ndatabase_KEGG_show_organism()"
  },
  {
    "objectID": "pkgfuns.html#arguments-12",
    "href": "pkgfuns.html#arguments-12",
    "title": "Package Functions Help",
    "section": "Arguments",
    "text": "Arguments\n\nkegg_organism: Determine which species data from KEGG will be fetch. For human, it would be hsa(in default); For mouse, it would be mmu. If you wants other species, see database_kegg_show_organism() for details.\nOrgDB: The AnnotationDbi database to convert KEGG gene ID to gene symbols. For human it would be org.Hs.eg.db, for mouse it would be org.Mm.eg.db. In AnnotationDbi there are many species, please search AnnotationDbi for other species annotation database.\nkegg_modules: If TRUE, returns KEGG module; If FALSE returns KEGG pathways. In default, this is setted to FALSE to get mouse commonly used KEGG pathways.\nlocal_cache: cache a copy in local working folder. It will be saved as a .enrichgt_cache file in working dictionary. The .enrichgt_cache is just a .rds file, feel free to read it using readRDS()."
  },
  {
    "objectID": "pkgfuns.html#description-14",
    "href": "pkgfuns.html#description-14",
    "title": "Package Functions Help",
    "section": "Description",
    "text": "Description\nInfix operator to filter enrichment results by matching against Description field. For EnrichGT_obj objects, re-runs clustering analysis after filtering."
  },
  {
    "objectID": "pkgfuns.html#usage-13",
    "href": "pkgfuns.html#usage-13",
    "title": "Package Functions Help",
    "section": "Usage",
    "text": "Usage\nx %-delete-&gt;% y"
  },
  {
    "objectID": "pkgfuns.html#arguments-13",
    "href": "pkgfuns.html#arguments-13",
    "title": "Package Functions Help",
    "section": "Arguments",
    "text": "Arguments\n\nx: Either an EnrichGT_obj object or data.frame containing enrichment results\ny: Regular expression pattern to match against Description field"
  },
  {
    "objectID": "pkgfuns.html#details-4",
    "href": "pkgfuns.html#details-4",
    "title": "Package Functions Help",
    "section": "Details",
    "text": "Details\nThis operator helps refine enrichment results by removing terms matching the given pattern from the Description field. When applied to EnrichGT_obj, it preserves all original parameters and re-runs the clustering analysis on the filtered results."
  },
  {
    "objectID": "pkgfuns.html#value-12",
    "href": "pkgfuns.html#value-12",
    "title": "Package Functions Help",
    "section": "Value",
    "text": "Value\nFor EnrichGT_obj input: A new EnrichGT_obj with filtered and re-clustered results. For data.frame input: A filtered data.frame."
  },
  {
    "objectID": "pkgfuns.html#examples-6",
    "href": "pkgfuns.html#examples-6",
    "title": "Package Functions Help",
    "section": "Examples",
    "text": "Examples\n# Filter out \"ribosome\" related terms\nfiltered_results &lt;- reenrichment_obj %-delete-&gt;% \"ribosome\"\n\n# Filter data.frame directly\nfiltered_df &lt;- df %-delete-&gt;% \"metabolism\""
  },
  {
    "objectID": "fusing.html",
    "href": "fusing.html",
    "title": "Functions to FUSING results",
    "section": "",
    "text": "Enrichment analysis using multiple databases\nSome enrichment analysis tools like Metascape can provide multi-database analysis in one-click (e.g. combining GO, KEGG, Reactome… ). EnrichGT also provides a similar function to achieve this (fuse them). You can provide a list containing multiple enrichment results form EnrichGT or clusterProfiler into egt_recluster_analysis.\n\n\n\n\n\n\nImportant\n\n\n\nOf note, all enriched objects in the same list should from the same gene source. Like the below example, both the res1 and res2 are enriched results from DEGtable$Genes.\n\n\nExample:\n\ndata(\"DEGexample\")\nDEGtable &lt;- DEGexample |&gt; dplyr::filter(padj &lt; 0.05, abs(log2FoldChange) &gt; 1)\nres1 &lt;- egt_enrichment_analysis(genes = DEGtable$...1,\ndatabase = database_GO_BP(org.Hs.eg.db))\n\n\n1\n\nSee the HTML reports and visualize guide for more visualize method (especially the HTML table!)\n\n\n\n\n✔ success loaded database, time used : 16.8450708389282 sec.\n\n\n✔ Done ORA in 0.12655782699585 sec.\n\nres2 &lt;- egt_enrichment_analysis(genes = DEGtable$...1,\ndatabase = database_Reactome(org.Hs.eg.db))\n\n'select()' returned 1:1 mapping between keys and columns\n\n\n✔ success loaded database, time used : 1.95769214630127 sec.\n\n\n✔ Done ORA in 0.0314650535583496 sec.\n\nFused_enrich &lt;- egt_recluster_analysis(list(res1,res2))\n\n✔ re-enrichment done.\n\n\nℹ You can adjust the param of egt_recluster_analysis() for better results. Please refer to the help page. \n\n1egt_plot_results(Fused_enrich, showIDs = T)\n\nℹ Found a fused EnrichGT_obj, you can set showIDs=T to show the source database the pathways from. \n\n\n\n\n\n\n\n\n\n\n\nReversed gene sources analyzed by same database\nThis is a less meticulously crafted feature that performs re-clustering analysis by categorizing and considering various cases, such as intersections, unions, and unrelated sets. The result is a list containing four EnrichGT_obj objects with overlapped enriched terms, unique enrich terms.\n# See ?egt_compare_groups for further helps\nResult_List &lt;- egt_compare_groups(\n  obj.test,\n  obj.ctrl,\n  name.test = NULL,\n  name.ctrl = NULL,\n  ClusterNum = 15,\n  P.adj = 0.05,\n  force = F,\n  nTop = 10,\n  method = \"ward.D2\",\n)\nExample:\n\nDEGexample_UpReg &lt;- DEGexample |&gt; dplyr::filter(pvalue&lt;0.05,log2FoldChange&gt;0.7)\nDEGexample_DownReg &lt;- DEGexample |&gt; dplyr::filter(pvalue&lt;0.05,log2FoldChange&lt;(-0.7))\nora_resultUP &lt;- egt_enrichment_analysis(genes = DEGexample_UpReg$...1,database = database_GO_BP(org.Hs.eg.db))\nora_resultDown &lt;- egt_enrichment_analysis(genes = DEGexample_DownReg$...1,database = database_GO_BP(org.Hs.eg.db))\nCompared_Result &lt;- egt_compare_groups(ora_resultUP,ora_resultDown)\n\nYou can use str(Result_List) to explore what is inside the list. All items inside it is all basic EnrichGT_objs. You can then use the functions from other sections of this tutorial for similar visualizations.\n\nstr(Compared_Result,max.level = 2)\n\nList of 4\n $ Overlap_Control:Formal class 'EnrichGT_obj' [package \"EnrichGT\"] with 10 slots\n $ Overlap_Test   :Formal class 'EnrichGT_obj' [package \"EnrichGT\"] with 10 slots\n $ Control_Only   :Formal class 'EnrichGT_obj' [package \"EnrichGT\"] with 10 slots\n $ Test_Only      :Formal class 'EnrichGT_obj' [package \"EnrichGT\"] with 10 slots\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Functions to FUSING results"
    ]
  },
  {
    "objectID": "preface.html",
    "href": "preface.html",
    "title": "Valedictory of Enrichment",
    "section": "",
    "text": "Engaged in bioinformatics analysis for over five years, I’ve come to realize that no matter which methods are used, understanding the function of identified genes inevitably requires enrichment analysis. It’s like a gateway that you can never avoid. Behind this gateway lie countless biological insights, waiting to be discovered. I will never forget the first time I encountered the clusterProfiler package four and a half years ago. Rich in features, timelessly innovative, concise, and powerful, it has been my guiding light among R packages—a true favorite in my analyses.\nAbout two and a half years ago, after learning to develop R packages myself, I always wanted to create a lightweight replication of such tools. However, the initial attempts resulted in packages with ever-increasing dependencies, making them cumbersome and inefficient, the very opposite of my intentions.\nAfter numerous analysis projects, I’ve come to a deeper understanding: the wealth of information from high-throughput sequencing often stands at odds with the simplicity of a single chart. Most top-tier journal articles today feature highly customized figures tailored to highlight important findings. In other words, the complexity of biology means that default plots generated by any tool might fail to convey all the underlying information. Default dot plots, for instance, might even lead you to overlook subtle biological stories hidden in the data.\nMoreover, most of the time, you need to report results to supervisors or clients. Busy with experiments, there’s often no time for custom visualizations, leaving you reliant on default plots. Over the years, I’ve pondered how to resolve this paradox—until I discovered the gt package developed by Posit. That’s when I realized: the time has come.\nTwo and a half years later, I’ve matured significantly, gaining a deeper understanding of R’s underlying logic and embracing the philosophy of “less is more” and “bad is good.” Now, it’s time to develop EnrichGT, which I consider my farewell gift to R. It’s a tool I take pride in—one that reveals the beauty of statistics—but life moves on. My research group is facing uncertain times, and the road ahead is unclear. Perhaps some things must inevitably come to an end.\nIn the wave of advancements in Python, machine learning, and artificial intelligence, it feels like the time to explore unknown horizons—if I still have the chance, though such opportunities may no longer be guaranteed.\n\n\n\n Back to top"
  },
  {
    "objectID": "llm.html",
    "href": "llm.html",
    "title": "Large language models integration",
    "section": "",
    "text": "Large language models (LLMs) hold promise for interpreting biological data, yet their effectiveness is constrained when directly handling raw gene input or complex enrichment analysis results.\nChallenges in Direct LLM Interpretation\n\nRaw Gene Input Limitations:\n\nLLMs exhibit suboptimal performance when provided solely with gene symbols or identifiers (e.g., TP53, BRCA1, EGFR).\nWithout additional biological metadata, LLMs struggle to establish meaningful biological contexts and infer functional relationships among genes.\n\nOverwhelming Enrichment Results:\n\nDirectly feeding complete outputs from Gene Ontology (GO) or Kyoto Encyclopedia of Genes and Genomes (KEGG) enrichment analyses into LLMs typically introduces excessive noise.\nContext window limitations result in significant information loss, hindering the accurate interpretation of complex enrichment data.\nDense, unstructured enrichment tables challenge LLMs’ ability to effectively prioritize and summarize critical biological insights.\n\n\nProposed Solution: Cluster-First Approach\nTo address these challenges, cluster-first methodology, exemplified by EnrichGT, is recommended. EnrichGT organizes enrichment results into meaningful clusters, thereby simplifying complexity and enhancing interpretability. Recently, EnrichGT has integrated support for LLM-driven interpretation, enabling LLMs to more effectively extract, summarize, and contextualize key biological insights from enrichment data.",
    "crumbs": [
      "Home",
      "Large language models integration"
    ]
  },
  {
    "objectID": "llm.html#bring-your-llm-to-r",
    "href": "llm.html#bring-your-llm-to-r",
    "title": "Large language models integration",
    "section": "Bring your LLM to R",
    "text": "Bring your LLM to R\nThe LLM function is based on package ellmer (https://ellmer.tidyverse.org/index.html). It provides a uniform interface for most of LLMs in R.\nellmer supports a wide variety of model providers:\n\nAnthropic’s Claude: chat_anthropic().\nAWS Bedrock: chat_aws_bedrock().\nAzure OpenAI: chat_azure_openai().\nDatabricks: chat_databricks().\nDeepSeek: chat_deepseek().\nGitHub model marketplace: chat_github().\nGoogle Gemini: chat_google_gemini().\nGroq: chat_groq().\nOllama: chat_ollama().\nOpenAI: chat_openai().\nOpenRouter: chat_openrouter().\nperplexity.ai: chat_perplexity().\nSnowflake Cortex: chat_snowflake() and chat_cortex_analyst().\nVLLM: chat_vllm().\n\nYou can generate a model in R environment like this (Please refer to ellmer website):\nlibrary(ellmer)\ndsAPI &lt;- \"sk-**********\" # your API key\nchat &lt;- chat_deepseek(api_key = dsAPI, model = \"deepseek-chat\", system_prompt = \"\")\nSome suggestions:\n\nYou may choose a cost-effective LLM model, as this type of annotation requires multiple calls. Also, make sure that both the LLM and the network are as stable as possible in order to obtain all the results (although EnrichGT has already been set to automatically retry multiple times).\nNon-reflective models or fast-thinking models are generally better. Slow-thinking models (such as DeepSeek-R1) may result in long waiting times.\nIt is best to choose an LLM model that is relatively intelligent, has a substantial knowledge base, and exhibits low hallucination rates. In our (albeit limited) experience, although GPT-4o performs worse than DeepSeek-V3-0324 in most benchmark tests, it may produce more reliable results in some cases due to the latter’s higher hallucination rate. You are free to choose whichever large model you prefer.\nNO system prompts. And please adjust your LLM’s tempretures according to your provider carefully.",
    "crumbs": [
      "Home",
      "Large language models integration"
    ]
  },
  {
    "objectID": "llm.html#summrize-your-results-using-llm",
    "href": "llm.html#summrize-your-results-using-llm",
    "title": "Large language models integration",
    "section": "Summrize your results using LLM",
    "text": "Summrize your results using LLM\nJust execute:\nre_enrichment_results &lt;- egt_llm_summary(re_enrichment_results, chat)\n\nA typical run in DeepSeek-V3-0324 will use ~ 6 mins.\nAfter complete, you can use $ operator to access annotated results. For example, the annotation of Cluster_1:\n\n\nllm_annotated_obj$Cluster_1\n\n\n\n\n── Enrichment Result of Cluster_1 (LLM Summary) ────────────────────────────────\n\n\n\n\n\n── \"Glutamatergic Synaptic Transmission and Plasticity Network\" ──\n\n\n\n\n\n• The pathways listed predominantly converge on glutamatergic synaptic\ntransmission and plasticity, highlighting a central role in excitatory\nneurotransmission and synaptic regulation. Key processes include glutamate\nreceptor signaling (ionotropic and metabotropic), synaptic vesicle dynamics,\nand trans-synaptic protein interactions (e.g., neurexins and neuroligins),\nwhich collectively modulate synaptic strength and plasticity. The inclusion of\nNMDA receptor unblocking and activation underscores the importance of\ncalcium-dependent plasticity mechanisms, such as long-term potentiation (LTP)\nor depression (LTD), critical for learning and memory.\n\nBiological implications suggest this module regulates cognitive functions and\nneuronal adaptability, with dysregulation linked to neuropsychiatric disorders\n(e.g., autism, schizophrenia). Evidence includes the association of neuroligin\nmutations with autism and NMDA receptor dysfunction with cognitive deficits.\nThe prominence of protein-protein interactions (e.g., neurexin-neuroligin)\nfurther implicates synaptic adhesion in maintaining circuit stability.\n\nA representative name for this module could be \"Glutamatergic Synaptic\nTransmission and Plasticity Network,\" reflecting its focus on excitatory\nsignaling and adaptive synaptic remodeling. This nomenclature aligns with the\npathways' roles in neuronal communication and their broader implications for\nbrain function and disease.\n\n\n• The gene set predominantly encodes proteins critical for glutamatergic\nsynaptic function, plasticity, and neuronal signaling, with particularly\nnoteworthy members including GRIN1/2A/2B (NMDA receptor subunits), GRIA4 (AMPA\nreceptor), and GRM1/5/8 (metabotropic glutamate receptors) that form the core\nexcitatory neurotransmission machinery. Several genes stand out for their\nestablished neurobiological roles: APOE influences synaptic repair and\nAlzheimer's risk, NRXN1 and NLGN1 mediate trans-synaptic adhesion crucial for\ncircuit formation, while NTRK2 (BDNF receptor) and CAMK2B regulate\nactivity-dependent plasticity. The presence of calcium-related genes (CACNG5,\nGRID2) and presynaptic regulators (UNC13A/C, RIMS3) suggests additional\nmodulation of vesicular release and calcium-dependent processes. Notably,\nmultiple genes (GRIN2B, SHISA9, IL1RAPL2) are associated with\nneurodevelopmental disorders, reinforcing the set's relevance to synaptic\npathology. The inclusion of atypical members like CDC20 (cell cycle) and HRAS\n(growth signaling) may reflect non-canonical neuronal functions or technical\nnoise, though WNT5A's role in synaptic patterning is established. The\ncollective profile implies these genes operate in coordinated networks\ngoverning synaptic strength, with particular importance for cognitive functions\nand neurological disease mechanisms, where glutamatergic dysfunction is\nimplicated across schizophrenia, autism, and neurodegenerative conditions. The\nmost biologically compelling targets appear to be the direct synaptic signaling\ncomponents (ionotropic receptors, adhesion molecules) and plasticity\nregulators, while others may represent secondary modulators or\ncontext-dependent players in neural circuits.\n\n\n[1] \"cli-92167-12\"\n\n\nAll the results are saved in the result@LLM_Annotation slot.",
    "crumbs": [
      "Home",
      "Large language models integration"
    ]
  }
]